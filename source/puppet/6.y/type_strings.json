{
  "component": {
    "description": "The name of the component.  Generally optional.",
    "features": {
    },
    "providers": {
    },
    "attributes": {
      "name": {
        "description": "The name of the component.  Generally optional.",
        "kind": "parameter",
        "namevar": true,
        "required_features": null
      }
    }
  },
  "exec": {
    "description": "Executes external commands.\n\nAny command in an `exec` resource **must** be able to run multiple times\nwithout causing harm --- that is, it must be *idempotent*. There are three\nmain ways for an exec to be idempotent:\n\n* The command itself is already idempotent. (For example, `apt-get update`.)\n* The exec has an `onlyif`, `unless`, or `creates` attribute, which prevents\n  Puppet from running the command unless some condition is met.\n* The exec has `refreshonly => true`, which allows Puppet to run the\n  command only when some other resource is changed. (See the notes on refreshing\n  below.)\n\nThe state managed by an `exec` resource represents whether the specified command\n_needs to be_ executed during the catalog run. The target state is always that\nthe command does not need to be executed. If the initial state is that the\ncommand _does_ need to be executed, then successfully executing the command\ntransitions it to the target state.\n\nThe `unless`, `onlyif`, and `creates` properties check the initial state of the\nresource. If one or more of these properties is specified, the exec might not\nneed to run. If the exec does not need to run, then the system is already in\nthe target state. In such cases, the exec is considered successful without\nactually executing its command.\n\nA caution: There's a widespread tendency to use collections of execs to\nmanage resources that aren't covered by an existing resource type. This\nworks fine for simple tasks, but once your exec pile gets complex enough\nthat you really have to think to understand what's happening, you should\nconsider developing a custom resource type instead, as it is much\nmore predictable and maintainable.\n\n**Duplication:** Even though `command` is the namevar, Puppet allows\nmultiple `exec` resources with the same `command` value.\n\n**Refresh:** `exec` resources can respond to refresh events (via\n`notify`, `subscribe`, or the `~>` arrow). The refresh behavior of execs\nis non-standard, and can be affected by the `refresh` and\n`refreshonly` attributes:\n\n* If `refreshonly` is set to true, the exec runs _only_ when it receives an\n  event. This is the most reliable way to use refresh with execs.\n* If the exec has already run and then receives an event, it runs its\n  command **up to two times.** If an `onlyif`, `unless`, or `creates` condition\n  is no longer met after the first run, the second run does not occur.\n* If the exec has already run, has a `refresh` command, and receives an\n  event, it runs its normal command. Then, if any `onlyif`, `unless`, or `creates`\n  conditions are still met, the exec runs its `refresh` command.\n* If the exec has an `onlyif`, `unless`, or `creates` attribute that prevents it\n  from running, and it then receives an event, it still will not run.\n* If the exec has `noop => true`, would otherwise have run, and receives\n  an event from a non-noop resource, it runs once. However, if it has a `refresh`\n  command, it runs that instead of its normal command.\n\nIn short: If there's a possibility of your exec receiving refresh events,\nit is extremely important to make sure the run conditions are restricted.\n\n**Autorequires:** If Puppet is managing an exec's cwd or the executable\nfile used in an exec's command, the exec resource autorequires those\nfiles. If Puppet is managing the user that an exec should run as, the\nexec resource autorequires that user.",
    "features": {
    },
    "providers": {
      "posix": {
        "features": [
          "umask"
        ],
        "description": "Executes external binaries directly, without passing through a shell or\nperforming any interpolation. This is a safer and more predictable way\nto execute most commands, but prevents the use of globbing and shell\nbuilt-ins (including control logic like \"for\" and \"if\" statements).\n\n* Confined to: `feature == posix`\n* Default for: `[\"feature\", \"posix\"] == `\n* Supported features: `umask`"
      },
      "shell": {
        "features": [

        ],
        "description": "Passes the provided command through `/bin/sh`; only available on\nPOSIX systems. This allows the use of shell globbing and built-ins, and\ndoes not require that the path to a command be fully-qualified. Although\nthis can be more convenient than the `posix` provider, it also means that\nyou need to be more careful with escaping; as ever, with great power comes\netc. etc.\n\nThis provider closely resembles the behavior of the `exec` type\nin Puppet 0.25.x.\n\n* Confined to: `feature == posix`"
      },
      "windows": {
        "features": [

        ],
        "description": "Execute external binaries on Windows systems. As with the `posix`\nprovider, this provider directly calls the command with the arguments\ngiven, without passing it through a shell or performing any interpolation.\nTo use shell built-ins --- that is, to emulate the `shell` provider on\nWindows --- a command must explicitly invoke the shell:\n\n    exec {'echo foo':\n      command => 'cmd.exe /c echo \"foo\"',\n    }\n\nIf no extension is specified for a command, Windows will use the `PATHEXT`\nenvironment variable to locate the executable.\n\n**Note on PowerShell scripts:** PowerShell's default `restricted`\nexecution policy doesn't allow it to run saved scripts. To run PowerShell\nscripts, specify the `remotesigned` execution policy as part of the\ncommand:\n\n    exec { 'test':\n      path    => 'C:/Windows/System32/WindowsPowerShell/v1.0',\n      command => 'powershell -executionpolicy remotesigned -file C:/test.ps1',\n    }\n\n* Confined to: `operatingsystem == windows`\n* Default for: `[\"operatingsystem\", \"windows\"] == `"
      }
    },
    "attributes": {
      "command": {
        "description": "The actual command to execute.  Must either be fully qualified\nor a search path for the command must be provided.  If the command\nsucceeds, any output produced will be logged at the instance's\nnormal log level (usually `notice`), but if the command fails\n(meaning its return code does not match the specified code) then\nany output is logged at the `err` log level.\n\nMultiple `exec` resources can use the same `command` value; Puppet\nonly uses the resource title to ensure `exec`s are unique.",
        "kind": "parameter",
        "namevar": true,
        "required_features": null
      },
      "cwd": {
        "description": "The directory from which to run the command.  If\nthis directory does not exist, the command will fail.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "environment": {
        "description": "An array of any additional environment variables you want to set for a\ncommand, such as `[ 'HOME=/root', 'MAIL=root@example.com']`.\nNote that if you use this to set PATH, it will override the `path`\nattribute. Multiple environment variables should be specified as an\narray.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "group": {
        "description": "The group to run the command as.  This seems to work quite\nhaphazardly on different platforms -- it is a platform issue\nnot a Ruby or Puppet one, since the same variety exists when\nrunning commands as different users in the shell.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "logoutput": {
        "description": "Whether to log command output in addition to logging the\nexit code. Defaults to `on_failure`, which only logs the output\nwhen the command has an exit code that does not match any value\nspecified by the `returns` attribute. As with any resource type,\nthe log level can be controlled with the `loglevel` metaparameter.\n\nDefault: `on_failure`\n\nAllowed values:\n\n* `true`\n* `false`\n* `on_failure`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "path": {
        "description": "The search path used for command execution.\nCommands must be fully qualified if no path is specified.  Paths\ncan be specified as an array or as a '",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "provider": {
        "description": "The specific backend to use for this `exec` resource. You will seldom need to specify this --- Puppet will usually discover the appropriate provider for your platform.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "refresh": {
        "description": "An alternate command to run when the `exec` receives a refresh event\nfrom another resource. By default, Puppet runs the main command again.\nFor more details, see the notes about refresh behavior above, in the\ndescription for this resource type.\n\nNote that this alternate command runs with the same `provider`, `path`,\n`user`, and `group` as the main command. If the `path` isn't set, you\nmust fully qualify the command's name.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "timeout": {
        "description": "The maximum time the command should take.  If the command takes\nlonger than the timeout, the command is considered to have failed\nand will be stopped. The timeout is specified in seconds. The default\ntimeout is 300 seconds and you can set it to 0 to disable the timeout.\n\nDefault: `300`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "tries": {
        "description": "The number of times execution of the command should be tried.\nThis many attempts will be made to execute the command until an\nacceptable return code is returned. Note that the timeout parameter\napplies to each try rather than to the complete set of tries.\n\nDefault: `1`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "try_sleep": {
        "description": "The time to sleep in seconds between 'tries'.\n\nDefault: `0`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "umask": {
        "description": "Sets the umask to be used while executing this command",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "user": {
        "description": "The user to run the command as.\n\n> **Note:** Puppet cannot execute commands as other users on Windows.\n\nNote that if you use this attribute, any error output is not captured\ndue to a bug within Ruby. If you use Puppet to create this user, the\nexec automatically requires the user, as long as it is specified by\nname.\n\nThe $HOME environment variable is not automatically set when using\nthis attribute.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "returns": {
        "description": "The expected exit code(s).  An error will be returned if the\nexecuted command has some other exit code. Can be specified as an array\nof acceptable exit codes or a single value.\n\nOn POSIX systems, exit codes are always integers between 0 and 255.\n\nOn Windows, **most** exit codes should be integers between 0\nand 2147483647.\n\nLarger exit codes on Windows can behave inconsistently across different\ntools. The Win32 APIs define exit codes as 32-bit unsigned integers, but\nboth the cmd.exe shell and the .NET runtime cast them to signed\nintegers. This means some tools will report negative numbers for exit\ncodes above 2147483647. (For example, cmd.exe reports 4294967295 as -1.)\nSince Puppet uses the plain Win32 APIs, it will report the very large\nnumber instead of the negative number, which might not be what you\nexpect if you got the exit code from a cmd.exe session.\n\nMicrosoft recommends against using negative/very large exit codes, and\nyou should avoid them when possible. To convert a negative exit code to\nthe positive one Puppet will use, add it to 4294967296.\n\nDefault: `0`",
        "kind": "property",
        "namevar": false,
        "required_features": null
      },
      "creates": {
        "description": "A file to look for before running the command. The command will\nonly run if the file **doesn't exist.**\n\nThis parameter doesn't cause Puppet to create a file; it is only\nuseful if **the command itself** creates a file.\n\n    exec { 'tar -xf /Volumes/nfs02/important.tar':\n      cwd     => '/var/tmp',\n      creates => '/var/tmp/myfile',\n      path    => ['/usr/bin', '/usr/sbin',],\n    }\n\nIn this example, `myfile` is assumed to be a file inside\n`important.tar`. If it is ever deleted, the exec will bring it\nback by re-extracting the tarball. If `important.tar` does **not**\nactually contain `myfile`, the exec will keep running every time\nPuppet runs.",
        "kind": "check",
        "namevar": false,
        "required_features": null
      },
      "onlyif": {
        "description": "A test command that checks the state of the target system and restricts\nwhen the `exec` can run. If present, Puppet runs this test command\nfirst, and only runs the main command if the test has an exit code of 0\n(success). For example:\n\n    exec { 'logrotate':\n      path     => '/usr/bin:/usr/sbin:/bin',\n      provider => shell,\n      onlyif   => 'test `du /var/log/messages | cut -f1` -gt 100000',\n    }\n\nThis would run `logrotate` only if that test returns true.\n\nNote that this test command runs with the same `provider`, `path`,\n`user`, `cwd`, and `group` as the main command. If the `path` isn't set, you\nmust fully qualify the command's name.\n\nThis parameter can also take an array of commands. For example:\n\n    onlyif => ['test -f /tmp/file1', 'test -f /tmp/file2'],\n\nThis `exec` would only run if every command in the array has an\nexit code of 0 (success).",
        "kind": "check",
        "namevar": false,
        "required_features": null
      },
      "refreshonly": {
        "description": "The command should only be run as a\nrefresh mechanism for when a dependent object is changed.  It only\nmakes sense to use this option when this command depends on some\nother object; it is useful for triggering an action:\n\n    # Pull down the main aliases file\n    file { '/etc/aliases':\n      source => 'puppet://server/module/aliases',\n    }\n\n    # Rebuild the database, but only when the file changes\n    exec { newaliases:\n      path        => ['/usr/bin', '/usr/sbin'],\n      subscribe   => File['/etc/aliases'],\n      refreshonly => true,\n    }\n\nNote that only `subscribe` and `notify` can trigger actions, not `require`,\nso it only makes sense to use `refreshonly` with `subscribe` or `notify`.\n\nAllowed values:\n\n* `true`\n* `false`",
        "kind": "check",
        "namevar": false,
        "required_features": null
      },
      "unless": {
        "description": "A test command that checks the state of the target system and restricts\nwhen the `exec` can run. If present, Puppet runs this test command\nfirst, then runs the main command unless the test has an exit code of 0\n(success). For example:\n\n    exec { '/bin/echo root >> /usr/lib/cron/cron.allow':\n      path   => '/usr/bin:/usr/sbin:/bin',\n      unless => 'grep root /usr/lib/cron/cron.allow 2>/dev/null',\n    }\n\nThis would add `root` to the cron.allow file (on Solaris) unless\n`grep` determines it's already there.\n\nNote that this test command runs with the same `provider`, `path`,\n`user`, `cwd`, and `group` as the main command. If the `path` isn't set, you\nmust fully qualify the command's name.\n\nThis parameter can also take an array of commands. For example:\n\n    unless => ['test -f /tmp/file1', 'test -f /tmp/file2'],\n\nThis `exec` would only run if every command in the array has a\nnon-zero exit code.",
        "kind": "check",
        "namevar": false,
        "required_features": null
      }
    }
  },
  "file": {
    "description": "Manages files, including their content, ownership, and permissions.\n\nThe `file` type can manage normal files, directories, and symlinks; the\ntype should be specified in the `ensure` attribute.\n\nFile contents can be managed directly with the `content` attribute, or\ndownloaded from a remote source using the `source` attribute; the latter\ncan also be used to recursively serve directories (when the `recurse`\nattribute is set to `true` or `local`). On Windows, note that file\ncontents are managed in binary mode; Puppet never automatically translates\nline endings.\n\n**Autorequires:** If Puppet is managing the user or group that owns a\nfile, the file resource will autorequire them. If Puppet is managing any\nparent directories of a file, the file resource autorequires them.\n\nWarning: Enabling `recurse` on directories containing large numbers of\nfiles slows agent runs. To manage file attributes for many files,\nconsider using alternative methods such as the `chmod_r`, `chown_r`,\n or `recursive_file_permissions` modules from the Forge.",
    "features": {
      "manages_symlinks": "The provider can manage symbolic links."
    },
    "providers": {
      "posix": {
        "features": [
          "manages_symlinks"
        ],
        "description": "Uses POSIX functionality to manage file ownership and permissions.\n\n* Confined to: `feature == posix`\n* Supported features: `manages_symlinks`"
      },
      "windows": {
        "features": [

        ],
        "description": "Uses Microsoft Windows functionality to manage file ownership and permissions.\n\n* Confined to: `operatingsystem == windows`"
      }
    },
    "attributes": {
      "backup": {
        "description": "Whether (and how) file content should be backed up before being replaced.\nThis attribute works best as a resource default in the site manifest\n(`File { backup => main }`), so it can affect all file resources.\n\n* If set to `false`, file content won't be backed up.\n* If set to a string beginning with `.`, such as `.puppet-bak`, Puppet will\n  use copy the file in the same directory with that value as the extension\n  of the backup. (A value of `true` is a synonym for `.puppet-bak`.)\n* If set to any other string, Puppet will try to back up to a filebucket\n  with that title. See the `filebucket` resource type for more details.\n  (This is the preferred method for backup, since it can be centralized\n  and queried.)\n\nDefault value: `puppet`, which backs up to a filebucket of the same name.\n(Puppet automatically creates a **local** filebucket named `puppet` if one\ndoesn't already exist.)\n\nBacking up to a local filebucket isn't particularly useful. If you want\nto make organized use of backups, you will generally want to use the\npuppet master server's filebucket service. This requires declaring a\nfilebucket resource and a resource default for the `backup` attribute\nin site.pp:\n\n    # /etc/puppetlabs/puppet/manifests/site.pp\n    filebucket { 'main':\n      path   => false,                # This is required for remote filebuckets.\n      server => 'puppet.example.com', # Optional; defaults to the configured puppet master.\n    }\n\n    File { backup => main, }\n\nIf you are using multiple puppet master servers, you will want to\ncentralize the contents of the filebucket. Either configure your load\nbalancer to direct all filebucket traffic to a single master, or use\nsomething like an out-of-band rsync task to synchronize the content on all\nmasters.\n\n> **Note**: Enabling and using the backup option, and by extension the\n  filebucket resource, requires appropriate planning and management to ensure\n  that sufficient disk space is available for the file backups. Generally, you\n  can implement this using one of the following two options:\n  - Use a `find` command and `crontab` entry to retain only the last X days\n  of file backups. For example:\n\n  ```\n  find /opt/puppetlabs/server/data/puppetserver/bucket -type f -mtime +45 -atime +45 -print0 | xargs -0 rm\n  ```\n\n  - Restrict the directory to a maximum size after which the oldest items are removed.\n\nDefault: `puppet`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "checksum": {
        "description": "The checksum type to use when determining whether to replace a file's contents.\n\nThe default checksum type is md5.\n\nAllowed values:\n\n* `Puppet::Util::Checksums.known_checksum_types`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "force": {
        "description": "Perform the file operation even if it will destroy one or more directories.\nYou must use `force` in order to:\n\n* `purge` subdirectories\n* Replace directories with files or links\n* Remove a directory when `ensure => absent`\n\nDefault: `false`\n\nAllowed values:\n\n* `true`\n* `false`\n* `yes`\n* `no`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "ignore": {
        "description": "A parameter which omits action on files matching\nspecified patterns during recursion.  Uses Ruby's builtin globbing\nengine, so shell metacharacters such as `[a-z]*` are fully supported.\nMatches that would descend into the directory structure are ignored,\nsuch as `*/*`.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "links": {
        "description": "How to handle links during file actions.  During file copying,\n`follow` will copy the target file instead of the link and `manage`\nwill copy the link itself. When not copying, `manage` will manage\nthe link, and `follow` will manage the file to which the link points.\n\nDefault: `manage`\n\nAllowed values:\n\n* `follow`\n* `manage`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "path": {
        "description": "The path to the file to manage.  Must be fully qualified.\n\nOn Windows, the path should include the drive letter and should use `/` as\nthe separator character (rather than `\\\\`).",
        "kind": "parameter",
        "namevar": true,
        "required_features": null
      },
      "provider": {
        "description": "The specific backend to use for this `file` resource. You will seldom need to specify this --- Puppet will usually discover the appropriate provider for your platform.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "purge": {
        "description": "Whether unmanaged files should be purged. This option only makes\nsense when `ensure => directory` and `recurse => true`.\n\n* When recursively duplicating an entire directory with the `source`\n  attribute, `purge => true` will automatically purge any files\n  that are not in the source directory.\n* When managing files in a directory as individual resources,\n  setting `purge => true` will purge any files that aren't being\n  specifically managed.\n\nIf you have a filebucket configured, the purged files will be uploaded,\nbut if you do not, this will destroy data.\n\nUnless `force => true` is set, purging will **not** delete directories,\nalthough it will delete the files they contain.\n\nIf `recurselimit` is set and you aren't using `force => true`, purging\nwill obey the recursion limit; files in any subdirectories deeper than the\nlimit will be treated as unmanaged and left alone.\n\nDefault: `false`\n\nAllowed values:\n\n* `true`\n* `false`\n* `yes`\n* `no`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "recurse": {
        "description": "Whether to recursively manage the _contents_ of a directory. This attribute\nis only used when `ensure => directory` is set. The allowed values are:\n\n* `false` --- The default behavior. The contents of the directory will not be\n  automatically managed.\n* `remote` --- If the `source` attribute is set, Puppet will automatically\n  manage the contents of the source directory (or directories), ensuring\n  that equivalent files and directories exist on the target system and\n  that their contents match.\n\n  Using `remote` will disable the `purge` attribute, but results in faster\n  catalog application than `recurse => true`.\n\n  The `source` attribute is mandatory when `recurse => remote`.\n* `true` --- If the `source` attribute is set, this behaves similarly to\n  `recurse => remote`, automatically managing files from the source directory.\n\n  This also enables the `purge` attribute, which can delete unmanaged\n  files from a directory. See the description of `purge` for more details.\n\n  The `source` attribute is not mandatory when using `recurse => true`, so you\n  can enable purging in directories where all files are managed individually.\n\nBy default, setting recurse to `remote` or `true` will manage _all_\nsubdirectories. You can use the `recurselimit` attribute to limit the\nrecursion depth.\n\nAllowed values:\n\n* `true`\n* `false`\n* `remote`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "recurselimit": {
        "description": "How far Puppet should descend into subdirectories, when using\n`ensure => directory` and either `recurse => true` or `recurse => remote`.\nThe recursion limit affects which files will be copied from the `source`\ndirectory, as well as which files can be purged when `purge => true`.\n\nSetting `recurselimit => 0` is the same as setting `recurse => false` ---\nPuppet will manage the directory, but all of its contents will be treated\nas unmanaged.\n\nSetting `recurselimit => 1` will manage files and directories that are\ndirectly inside the directory, but will not manage the contents of any\nsubdirectories.\n\nSetting `recurselimit => 2` will manage the direct contents of the\ndirectory, as well as the contents of the _first_ level of subdirectories.\n\nThis pattern continues for each incremental value of `recurselimit`.\n\nAllowed values:\n\n* `/^[0-9]+$/`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "replace": {
        "description": "Whether to replace a file or symlink that already exists on the local system but\nwhose content doesn't match what the `source` or `content` attribute\nspecifies.  Setting this to false allows file resources to initialize files\nwithout overwriting future changes.  Note that this only affects content;\nPuppet will still manage ownership and permissions.\n\nDefault: `true`\n\nAllowed values:\n\n* `true`\n* `false`\n* `yes`\n* `no`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "selinux_ignore_defaults": {
        "description": "If this is set then Puppet will not ask SELinux (via matchpathcon) to\nsupply defaults for the SELinux attributes (seluser, selrole,\nseltype, and selrange). In general, you should leave this set at its\ndefault and only set it to true when you need Puppet to not try to fix\nSELinux labels automatically.\n\nDefault: `false`\n\nAllowed values:\n\n* `true`\n* `false`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "show_diff": {
        "description": "Whether to display differences when the file changes, defaulting to\ntrue.  This parameter is useful for files that may contain passwords or\nother secret data, which might otherwise be included in Puppet reports or\nother insecure outputs.  If the global `show_diff` setting\nis false, then no diffs will be shown even if this parameter is true.\n\nDefault: `true`\n\nAllowed values:\n\n* `true`\n* `false`\n* `yes`\n* `no`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "source": {
        "description": "A source file, which will be copied into place on the local system. This\nattribute is mutually exclusive with `content` and `target`. Allowed\nvalues are:\n\n* `puppet:` URIs, which point to files in modules or Puppet file server\nmount points.\n* Fully qualified paths to locally available files (including files on NFS\nshares or Windows mapped drives).\n* `file:` URIs, which behave the same as local file paths.\n* `http(s):` URIs, which point to files served by common web servers.\n\nThe normal form of a `puppet:` URI is:\n\n`puppet:///modules/<MODULE NAME>/<FILE PATH>`\n\nThis will fetch a file from a module on the Puppet master (or from a\nlocal module when using Puppet apply). Given a `modulepath` of\n`/etc/puppetlabs/code/modules`, the example above would resolve to\n`/etc/puppetlabs/code/modules/<MODULE NAME>/files/<FILE PATH>`.\n\nUnlike `content`, the `source` attribute can be used to recursively copy\ndirectories if the `recurse` attribute is set to `true` or `remote`. If\na source directory contains symlinks, use the `links` attribute to\nspecify whether to recreate links or follow them.\n\n_HTTP_ URIs cannot be used to recursively synchronize whole directory\ntrees. You cannot use `source_permissions` values other than `ignore`\nbecause HTTP servers do not transfer any metadata that translates to\nownership or permission details.\n\nPuppet determines if file content is synchronized by computing a checksum\nfor the local file and comparing it against the `checksum_value`\nparameter. If the `checksum_value` parameter is not specified for\n`puppet` and `file` sources, Puppet computes a checksum based on its\n`Puppet[:digest_algorithm]`. For `http(s)` sources, Puppet uses the\nfirst HTTP header it recognizes out of the following list:\n`X-Checksum-Sha256`, `X-Checksum-Sha1`, `X-Checksum-Md5` or `Content-MD5`.\nIf the server response does not include one of these headers, Puppet\ndefaults to using the `Last-Modified` header. Puppet updates the local\nfile if the header is newer than the modified time (mtime) of the local\nfile.\n\n_HTTP_ URIs can include a user information component so that Puppet can\nretrieve file metadata and content from HTTP servers that require HTTP Basic\nauthentication. For example `https://<user>:<pass>@<server>:<port>/path/to/file.`\n\nWhen connecting to _HTTPS_ servers, Puppet trusts CA certificates in the\npuppet-agent certificate bundle and the Puppet CA. You can configure Puppet\nto trust additional CA certificates using the `Puppet[:ssl_trust_store]`\nsetting.\n\nMultiple `source` values can be specified as an array, and Puppet will\nuse the first source that exists. This can be used to serve different\nfiles to different system types:\n\n    file { '/etc/nfs.conf':\n      source => [\n        \"puppet:///modules/nfs/conf.${host}\",\n        \"puppet:///modules/nfs/conf.${operatingsystem}\",\n        'puppet:///modules/nfs/conf'\n      ]\n    }\n\nAlternately, when serving directories recursively, multiple sources can\nbe combined by setting the `sourceselect` attribute to `all`.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "source_permissions": {
        "description": "Whether (and how) Puppet should copy owner, group, and mode permissions from\nthe `source` to `file` resources when the permissions are not explicitly\nspecified. (In all cases, explicit permissions will take precedence.)\nValid values are `use`, `use_when_creating`, and `ignore`:\n\n* `ignore` (the default) will never apply the owner, group, or mode from\n  the `source` when managing a file. When creating new files without explicit\n  permissions, the permissions they receive will depend on platform-specific\n  behavior. On POSIX, Puppet will use the umask of the user it is running as.\n  On Windows, Puppet will use the default DACL associated with the user it is\n  running as.\n* `use` will cause Puppet to apply the owner, group,\n  and mode from the `source` to any files it is managing.\n* `use_when_creating` will only apply the owner, group, and mode from the\n  `source` when creating a file; existing files will not have their permissions\n  overwritten.\n\nDefault: `ignore`\n\nAllowed values:\n\n* `use`\n* `use_when_creating`\n* `ignore`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "sourceselect": {
        "description": "Whether to copy all valid sources, or just the first one.  This parameter\nonly affects recursive directory copies; by default, the first valid\nsource is the only one used, but if this parameter is set to `all`, then\nall valid sources will have all of their contents copied to the local\nsystem. If a given file exists in more than one source, the version from\nthe earliest source in the list will be used.\n\nDefault: `first`\n\nAllowed values:\n\n* `first`\n* `all`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "staging_location": {
        "description": "When rendering a file first render it to this location. The default\nlocation is the same path as the desired location with a unique filename.\nThis parameter is useful in conjuction with validate_cmd to test a\nfile before moving the file to it's final location.\nWARNING: File replacement is only guaranteed to be atomic if the staging\nlocation is on the same filesystem as the final location.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "validate_cmd": {
        "description": "A command for validating the file's syntax before replacing it. If\nPuppet would need to rewrite a file due to new `source` or `content`, it\nwill check the new content's validity first. If validation fails, the file\nresource will fail.\n\nThis command must have a fully qualified path, and should contain a\npercent (`%`) token where it would expect an input file. It must exit `0`\nif the syntax is correct, and non-zero otherwise. The command will be\nrun on the target system while applying the catalog, not on the puppet master.\n\nExample:\n\n    file { '/etc/apache2/apache2.conf':\n      content      => 'example',\n      validate_cmd => '/usr/sbin/apache2 -t -f %',\n    }\n\nThis would replace apache2.conf only if the test returned true.\n\nNote that if a validation command requires a `%` as part of its text,\nyou can specify a different placeholder token with the\n`validate_replacement` attribute.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "validate_replacement": {
        "description": "The replacement string in a `validate_cmd` that will be replaced\nwith an input file name.\n\nDefault: `%`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "checksum_value": {
        "description": "The checksum of the source contents. Only md5, sha256, sha224, sha384 and sha512\nare supported when specifying this parameter. If this parameter is set,\nsource_permissions will be assumed to be false, and ownership and permissions\nwill not be read from source.",
        "kind": "property",
        "namevar": false,
        "required_features": null
      },
      "content": {
        "description": "The desired contents of a file, as a string. This attribute is mutually\nexclusive with `source` and `target`.\n\nNewlines and tabs can be specified in double-quoted strings using\nstandard escaped syntax --- \\n for a newline, and \\t for a tab.\n\nWith very small files, you can construct content strings directly in\nthe manifest...\n\n    define resolve($nameserver1, $nameserver2, $domain, $search) {\n        $str = \"search ${search}\n            domain ${domain}\n            nameserver ${nameserver1}\n            nameserver ${nameserver2}\n            \"\n\n        file { '/etc/resolv.conf':\n          content => $str,\n        }\n    }\n\n...but for larger files, this attribute is more useful when combined with the\n[template](https://puppet.com/docs/puppet/latest/function.html#template)\nor [file](https://puppet.com/docs/puppet/latest/function.html#file)\nfunction.",
        "kind": "property",
        "namevar": false,
        "required_features": null
      },
      "ctime": {
        "description": "A read-only state to check the file ctime. On most modern \\*nix-like\nsystems, this is the time of the most recent change to the owner, group,\npermissions, or content of the file.",
        "kind": "property",
        "namevar": false,
        "required_features": null
      },
      "group": {
        "description": "Which group should own the file.  Argument can be either a group\nname or a group ID.\n\nOn Windows, a user (such as \"Administrator\") can be set as a file's group\nand a group (such as \"Administrators\") can be set as a file's owner;\nhowever, a file's owner and group shouldn't be the same. (If the owner\nis also the group, files with modes like `\"0640\"` will cause log churn, as\nthey will always appear out of sync.)",
        "kind": "property",
        "namevar": false,
        "required_features": null
      },
      "mode": {
        "description": "The desired permissions mode for the file, in symbolic or numeric\nnotation. This value **must** be specified as a string; do not use\nun-quoted numbers to represent file modes.\n\nIf the mode is omitted (or explicitly set to `undef`), Puppet does not\nenforce permissions on existing files and creates new files with\npermissions of `0644`.\n\nThe `file` type uses traditional Unix permission schemes and translates\nthem to equivalent permissions for systems which represent permissions\ndifferently, including Windows. For detailed ACL controls on Windows,\nyou can leave `mode` unmanaged and use\n[the puppetlabs/acl module.](https://forge.puppetlabs.com/puppetlabs/acl)\n\nNumeric modes should use the standard octal notation of\n`<SETUID/SETGID/STICKY><OWNER><GROUP><OTHER>` (for example, \"0644\").\n\n* Each of the \"owner,\" \"group,\" and \"other\" digits should be a sum of the\n  permissions for that class of users, where read = 4, write = 2, and\n  execute/search = 1.\n* The setuid/setgid/sticky digit is also a sum, where setuid = 4, setgid = 2,\n  and sticky = 1.\n* The setuid/setgid/sticky digit is optional. If it is absent, Puppet will\n  clear any existing setuid/setgid/sticky permissions. (So to make your intent\n  clear, you should use at least four digits for numeric modes.)\n* When specifying numeric permissions for directories, Puppet sets the search\n  permission wherever the read permission is set.\n\nSymbolic modes should be represented as a string of comma-separated\npermission clauses, in the form `<WHO><OP><PERM>`:\n\n* \"Who\" should be any combination of u (user), g (group), and o (other), or a (all)\n* \"Op\" should be = (set exact permissions), + (add select permissions),\n  or - (remove select permissions)\n* \"Perm\" should be one or more of:\n    * r (read)\n    * w (write)\n    * x (execute/search)\n    * t (sticky)\n    * s (setuid/setgid)\n    * X (execute/search if directory or if any one user can execute)\n    * u (user's current permissions)\n    * g (group's current permissions)\n    * o (other's current permissions)\n\nThus, mode `\"0664\"` could be represented symbolically as either `a=r,ug+w`\nor `ug=rw,o=r`.  However, symbolic modes are more expressive than numeric\nmodes: a mode only affects the specified bits, so `mode => 'ug+w'` will\nset the user and group write bits, without affecting any other bits.\n\nSee the manual page for GNU or BSD `chmod` for more details\non numeric and symbolic modes.\n\nOn Windows, permissions are translated as follows:\n\n* Owner and group names are mapped to Windows SIDs\n* The \"other\" class of users maps to the \"Everyone\" SID\n* The read/write/execute permissions map to the `FILE_GENERIC_READ`,\n  `FILE_GENERIC_WRITE`, and `FILE_GENERIC_EXECUTE` access rights; a\n  file's owner always has the `FULL_CONTROL` right\n* \"Other\" users can't have any permissions a file's group lacks,\n  and its group can't have any permissions its owner lacks; that is, \"0644\"\n  is an acceptable mode, but \"0464\" is not.",
        "kind": "property",
        "namevar": false,
        "required_features": null
      },
      "mtime": {
        "description": "A read-only state to check the file mtime. On \\*nix-like systems, this\nis the time of the most recent change to the content of the file.",
        "kind": "property",
        "namevar": false,
        "required_features": null
      },
      "owner": {
        "description": "The user to whom the file should belong.  Argument can be a user name or a\nuser ID.\n\nOn Windows, a group (such as \"Administrators\") can be set as a file's owner\nand a user (such as \"Administrator\") can be set as a file's group; however,\na file's owner and group shouldn't be the same. (If the owner is also\nthe group, files with modes like `\"0640\"` will cause log churn, as they\nwill always appear out of sync.)",
        "kind": "property",
        "namevar": false,
        "required_features": null
      },
      "selrange": {
        "description": "What the SELinux range component of the context of the file should be.\nAny valid SELinux range component is accepted.  For example `s0` or\n`SystemHigh`.  If not specified it defaults to the value returned by\nmatchpathcon for the file, if any exists.  Only valid on systems with\nSELinux support enabled and that have support for MCS (Multi-Category\nSecurity).",
        "kind": "property",
        "namevar": false,
        "required_features": null
      },
      "selrole": {
        "description": "What the SELinux role component of the context of the file should be.\nAny valid SELinux role component is accepted.  For example `role_r`.\nIf not specified it defaults to the value returned by matchpathcon for\nthe file, if any exists.  Only valid on systems with SELinux support\nenabled.",
        "kind": "property",
        "namevar": false,
        "required_features": null
      },
      "seltype": {
        "description": "What the SELinux type component of the context of the file should be.\nAny valid SELinux type component is accepted.  For example `tmp_t`.\nIf not specified it defaults to the value returned by matchpathcon for\nthe file, if any exists.  Only valid on systems with SELinux support\nenabled.",
        "kind": "property",
        "namevar": false,
        "required_features": null
      },
      "seluser": {
        "description": "What the SELinux user component of the context of the file should be.\nAny valid SELinux user component is accepted.  For example `user_u`.\nIf not specified it defaults to the value returned by matchpathcon for\nthe file, if any exists.  Only valid on systems with SELinux support\nenabled.",
        "kind": "property",
        "namevar": false,
        "required_features": null
      },
      "target": {
        "description": "The target for creating a link.  Currently, symlinks are the\nonly type supported. This attribute is mutually exclusive with `source`\nand `content`.\n\nSymlink targets can be relative, as well as absolute:\n\n    # (Useful on Solaris)\n    file { '/etc/inetd.conf':\n      ensure => link,\n      target => 'inet/inetd.conf',\n    }\n\nDirectories of symlinks can be served recursively by instead using the\n`source` attribute, setting `ensure` to `directory`, and setting the\n`links` attribute to `manage`.\n\nAllowed values:\n\n* `notlink`\n* `/./`",
        "kind": "property",
        "namevar": false,
        "required_features": null
      },
      "type": {
        "description": "A read-only state to check the file type.",
        "kind": "property",
        "namevar": false,
        "required_features": null
      }
    }
  },
  "filebucket": {
    "description": "A repository for storing and retrieving file content by MD5 checksum. Can\nbe local to each agent node, or centralized on a puppet master server. All\npuppet masters provide a filebucket service that agent nodes can access\nvia HTTP, but you must declare a filebucket resource before any agents\nwill do so.\n\nFilebuckets are used for the following features:\n\n- **Content backups.** If the `file` type's `backup` attribute is set to\n  the name of a filebucket, Puppet will back up the _old_ content whenever\n  it rewrites a file; see the documentation for the `file` type for more\n  details. These backups can be used for manual recovery of content, but\n  are more commonly used to display changes and differences in a tool like\n  Puppet Dashboard.\n\nTo use a central filebucket for backups, you will usually want to declare\na filebucket resource and a resource default for the `backup` attribute\nin site.pp:\n\n    # /etc/puppetlabs/puppet/manifests/site.pp\n    filebucket { 'main':\n      path   => false,                # This is required for remote filebuckets.\n      server => 'puppet.example.com', # Optional; defaults to the configured puppet master.\n    }\n\n    File { backup => main, }\n\nPuppet master servers automatically provide the filebucket service, so\nthis will work in a default configuration. If you have a heavily\nrestricted `auth.conf` file, you may need to allow access to the\n`file_bucket_file` endpoint.",
    "features": {
    },
    "providers": {
    },
    "attributes": {
      "name": {
        "description": "The name of the filebucket.",
        "kind": "parameter",
        "namevar": true,
        "required_features": null
      },
      "path": {
        "description": "The path to the _local_ filebucket; defaults to the value of the\n`clientbucketdir` setting.  To use a remote filebucket, you _must_ set\nthis attribute to `false`.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "port": {
        "description": "The port on which the remote server is listening.\n\nThis setting is _only_ consulted if the `path` attribute is set to `false`.\n\nIf this attribute is not specified, the first entry in the `server_list`\nconfiguration setting is used, followed by the value of the `serverport`\nsetting if `server_list` is not set.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "server": {
        "description": "The server providing the remote filebucket service.\n\nThis setting is _only_ consulted if the `path` attribute is set to `false`.\n\nIf this attribute is not specified, the first entry in the `server_list`\nconfiguration setting is used, followed by the value of the `server` setting\nif `server_list` is not set.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      }
    }
  },
  "group": {
    "description": "Manage groups. On most platforms this can only create groups.\nGroup membership must be managed on individual users.\n\nOn some platforms such as OS X, group membership is managed as an\nattribute of the group, not the user record. Providers must have\nthe feature 'manages_members' to manage the 'members' property of\na group record.",
    "features": {
      "manages_aix_lam": "The provider can manage AIX Loadable Authentication Module (LAM) system.",
      "manages_local_users_and_groups": "Allows local groups to be managed on systems that also use some other remote Name Switch Service (NSS) method of managing accounts.",
      "manages_members": "For directories where membership is an attribute of groups not users.",
      "system_groups": "The provider allows you to create system groups with lower GIDs."
    },
    "providers": {
      "aix": {
        "features": [
          "manages_aix_lam",
          "manages_members",
          "manages_local_users_and_groups"
        ],
        "description": "Group management for AIX.\n\n* Required binaries: `/usr/sbin/lsgroup`, `/usr/bin/mkgroup`, `/usr/sbin/rmgroup`, `/usr/bin/chgroup`\n* Confined to: `operatingsystem == aix`\n* Default for: `[\"operatingsystem\", \"aix\"] == `\n* Supported features: `manages_aix_lam`, `manages_members`, `manages_local_users_and_groups`"
      },
      "directoryservice": {
        "features": [
          "manages_members"
        ],
        "description": "Group management using DirectoryService on OS X.\n\n* Required binaries: `/usr/bin/dscl`\n* Confined to: `operatingsystem == darwin`\n* Default for: `[\"operatingsystem\", \"darwin\"] == `\n* Supported features: `manages_members`"
      },
      "groupadd": {
        "features": [

        ],
        "description": "Group management via `groupadd` and its ilk. The default for most platforms.\n\n* Required binaries: `groupadd`, `groupdel`, `groupmod`"
      },
      "ldap": {
        "features": [

        ],
        "description": "Group management via LDAP.\n\nThis provider requires that you have valid values for all of the\nLDAP-related settings in `puppet.conf`, including `ldapbase`.  You will\nalmost definitely need settings for `ldapuser` and `ldappassword` in order\nfor your clients to write to LDAP.\n\nNote that this provider will automatically generate a GID for you if you do\nnot specify one, but it is a potentially expensive operation, as it\niterates across all existing groups to pick the appropriate next one.\n\n* Confined to: `feature == ldap`, `false == (Puppet[:ldapuser] == \"\")`"
      },
      "pw": {
        "features": [
          "manages_members"
        ],
        "description": "Group management via `pw` on FreeBSD and DragonFly BSD.\n\n* Required binaries: `pw`\n* Confined to: `operatingsystem == [:freebsd, :dragonfly]`\n* Default for: `[\"operatingsystem\", \"[:freebsd, :dragonfly]\"] == `\n* Supported features: `manages_members`"
      },
      "windows_adsi": {
        "features": [
          "manages_members"
        ],
        "description": "Local group management for Windows. Group members can be both users and groups.\nAdditionally, local groups can contain domain users.\n\n* Confined to: `operatingsystem == windows`\n* Default for: `[\"operatingsystem\", \"windows\"] == `\n* Supported features: `manages_members`"
      }
    },
    "attributes": {
      "allowdupe": {
        "description": "Whether to allow duplicate GIDs.\n\nDefault: `false`\n\nAllowed values:\n\n* `true`\n* `false`\n* `yes`\n* `no`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "attribute_membership": {
        "description": "AIX only. Configures the behavior of the `attributes` parameter.\n\n* `minimum` (default) --- The provided list of attributes is partial, and Puppet\n  **ignores** any attributes that aren't listed there.\n* `inclusive` --- The provided list of attributes is comprehensive, and\n  Puppet **purges** any attributes that aren't listed there.\n\nDefault: `minimum`\n\nAllowed values:\n\n* `inclusive`\n* `minimum`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "auth_membership": {
        "description": "Configures the behavior of the `members` parameter.\n\n* `false` (default) --- The provided list of group members is partial,\n  and Puppet **ignores** any members that aren't listed there.\n* `true` --- The provided list of of group members is comprehensive, and\n  Puppet **purges** any members that aren't listed there.\n\nDefault: `false`\n\nAllowed values:\n\n* `true`\n* `false`\n* `yes`\n* `no`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "forcelocal": {
        "description": "Forces the management of local accounts when accounts are also\nbeing managed by some other Name Switch Service (NSS). For AIX, refer to the `ia_load_module` parameter.\n\nThis option relies on your operating system's implementation of `luser*` commands, such as `luseradd` , `lgroupadd`, and `lusermod`. The `forcelocal` option could behave unpredictably in some circumstances. If the tools it depends on are not available, it might have no effect at all.\n\nDefault: `false`\n\nAllowed values:\n\n* `true`\n* `false`\n* `yes`\n* `no`",
        "kind": "parameter",
        "namevar": false,
        "required_features": "manages_local_users_and_groups"
      },
      "ia_load_module": {
        "description": "The name of the I&A module to use to manage this group.\nThis should be set to `files` if managing local groups.",
        "kind": "parameter",
        "namevar": false,
        "required_features": "manages_aix_lam"
      },
      "name": {
        "description": "The group name. While naming limitations vary by operating system,\nit is advisable to restrict names to the lowest common denominator,\nwhich is a maximum of 8 characters beginning with a letter.\n\nNote that Puppet considers group names to be case-sensitive, regardless\nof the platform's own rules; be sure to always use the same case when\nreferring to a given group.",
        "kind": "parameter",
        "namevar": true,
        "required_features": null
      },
      "provider": {
        "description": "The specific backend to use for this `group` resource. You will seldom need to specify this --- Puppet will usually discover the appropriate provider for your platform.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "system": {
        "description": "Whether the group is a system group with lower GID.\n\nDefault: `false`\n\nAllowed values:\n\n* `true`\n* `false`\n* `yes`\n* `no`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "attributes": {
        "description": "Specify group AIX attributes, as an array of `'key=value'` strings. This\nparameter's behavior can be configured with `attribute_membership`.",
        "kind": "property",
        "namevar": false,
        "required_features": "manages_aix_lam"
      },
      "ensure": {
        "description": "Create or remove the group.\n\nDefault: `present`\n\nAllowed values:\n\n* `present`\n* `absent`",
        "kind": "property",
        "namevar": false,
        "required_features": null
      },
      "gid": {
        "description": "The group ID.  Must be specified numerically.  If no group ID is\nspecified when creating a new group, then one will be chosen\nautomatically according to local system standards. This will likely\nresult in the same group having different GIDs on different systems,\nwhich is not recommended.\n\nOn Windows, this property is read-only and will return the group's security\nidentifier (SID).",
        "kind": "property",
        "namevar": false,
        "required_features": null
      },
      "members": {
        "description": "The members of the group. For platforms or directory services where group\nmembership is stored in the group objects, not the users. This parameter's\nbehavior can be configured with `auth_membership`.",
        "kind": "property",
        "namevar": false,
        "required_features": "manages_members"
      }
    }
  },
  "notify": {
    "description": "Sends an arbitrary message, specified as a string, to the agent run-time log. It's important to note that the notify resource type is not idempotent. As a result, notifications are shown as a change on every Puppet run.",
    "features": {
    },
    "providers": {
    },
    "attributes": {
      "name": {
        "description": "An arbitrary tag for your own reference; the name of the message.",
        "kind": "parameter",
        "namevar": true,
        "required_features": null
      },
      "withpath": {
        "description": "Whether to show the full object path.\n\nDefault: `false`\n\nAllowed values:\n\n* `true`\n* `false`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "message": {
        "description": "The message to be sent to the log. Note that the value specified must be a string.",
        "kind": "property",
        "namevar": false,
        "required_features": null
      }
    }
  },
  "package": {
    "description": "Manage packages.  There is a basic dichotomy in package\nsupport right now:  Some package types (such as yum and apt) can\nretrieve their own package files, while others (such as rpm and sun)\ncannot.  For those package formats that cannot retrieve their own files,\nyou can use the `source` parameter to point to the correct file.\n\nPuppet will automatically guess the packaging format that you are\nusing based on the platform you are on, but you can override it\nusing the `provider` parameter; each provider defines what it\nrequires in order to function, and you must meet those requirements\nto use a given provider.\n\nYou can declare multiple package resources with the same `name` as long\nas they have unique titles, and specify different providers and commands.\n\nNote that you must use the _title_ to make a reference to a package\nresource; `Package[<NAME>]` is not a synonym for `Package[<TITLE>]` like\nit is for many other resource types.\n\n**Autorequires:** If Puppet is managing the files specified as a\npackage's `adminfile`, `responsefile`, or `source`, the package\nresource will autorequire those files.",
    "features": {
      "disableable": "The provider can disable packages. This feature is used by specifying `disabled` as the desired value for the package.",
      "holdable": "The provider is capable of placing packages on hold such that they are not automatically upgraded as a result of other package dependencies unless explicit action is taken by a user or another package.",
      "install_only": "The provider accepts options to only install packages never update (kernels, etc.)",
      "install_options": "The provider accepts options to be passed to the installer command.",
      "installable": "The provider can install packages.",
      "package_settings": "The provider accepts package_settings to be ensured for the given package. The meaning and format of these settings is provider-specific.",
      "purgeable": "The provider can purge packages.  This generally means that all traces of the package are removed, including existing configuration files.  This feature is thus destructive and should be used with the utmost care.",
      "reinstallable": "The provider can reinstall packages.",
      "supports_flavors": "The provider accepts flavors, which are specific variants of packages.",
      "targetable": "The provider accepts a targeted package management command.",
      "uninstall_options": "The provider accepts options to be passed to the uninstaller command.",
      "uninstallable": "The provider can uninstall packages.",
      "upgradeable": "The provider can upgrade to the latest version of a package.  This feature is used by specifying `latest` as the desired value for the package.",
      "version_ranges": "The provider can ensure version ranges.",
      "versionable": "The provider is capable of interrogating the package database for installed version(s), and can select which out of a set of available versions of a package to install if asked.",
      "virtual_packages": "The provider accepts virtual package names for install and uninstall."
    },
    "providers": {
      "aix": {
        "features": [
          "versionable"
        ],
        "description": "Installation from an AIX software directory, using the AIX `installp`\ncommand.  The `source` parameter is required for this provider, and should\nbe set to the absolute path (on the puppet agent machine) of a directory\ncontaining one or more BFF package files.\n\nThe `installp` command will generate a table of contents file (named `.toc`)\nin this directory, and the `name` parameter (or resource title) that you\nspecify for your `package` resource must match a package name that exists\nin the `.toc` file.\n\nNote that package downgrades are *not* supported; if your resource specifies\na specific version number and there is already a newer version of the package\ninstalled on the machine, the resource will fail with an error message.\n\n* Required binaries: `/usr/bin/lslpp`, `/usr/sbin/installp`\n* Confined to: `operatingsystem == [ :aix ]`\n* Default for: `[\"operatingsystem\", \"aix\"] == `\n* Supported features: `versionable`"
      },
      "appdmg": {
        "features": [

        ],
        "description": "Package management which copies application bundles to a target.\n\n* Required binaries: `/usr/bin/hdiutil`, `/usr/bin/curl`, `/usr/bin/ditto`\n* Confined to: `operatingsystem == darwin`, `feature == cfpropertylist`"
      },
      "apple": {
        "features": [

        ],
        "description": "Package management based on OS X's built-in packaging system.  This is\nessentially the simplest and least functional package system in existence --\nit only supports installation; no deletion or upgrades.  The provider will\nautomatically add the `.pkg` extension, so leave that off when specifying\nthe package name.\n\n* Required binaries: `/usr/sbin/installer`\n* Confined to: `operatingsystem == darwin`"
      },
      "apt": {
        "features": [
          "versionable",
          "install_options",
          "virtual_packages"
        ],
        "description": "Package management via `apt-get`.\n\nThis provider supports the `install_options` attribute, which allows command-line flags to be passed to apt-get.\nThese options should be specified as an array where each element is either a\n string or a hash.\n\n* Required binaries: `/usr/bin/apt-get`, `/usr/bin/apt-cache`, `/usr/bin/apt-mark`, `/usr/bin/debconf-set-selections`\n* Default for: `[\"osfamily\", \"debian\"] == `\n* Supported features: `versionable`, `install_options`, `virtual_packages`"
      },
      "aptitude": {
        "features": [
          "versionable"
        ],
        "description": "Package management via `aptitude`.\n\n* Required binaries: `/usr/bin/aptitude`, `/usr/bin/apt-cache`\n* Supported features: `versionable`"
      },
      "aptrpm": {
        "features": [
          "versionable"
        ],
        "description": "Package management via `apt-get` ported to `rpm`.\n\n* Required binaries: `apt-get`, `apt-cache`, `rpm`\n* Supported features: `versionable`"
      },
      "blastwave": {
        "features": [

        ],
        "description": "Package management using Blastwave.org's `pkg-get` command on Solaris.\n\n* Required binaries: `pkgget`\n* Confined to: `osfamily == solaris`"
      },
      "dnf": {
        "features": [
          "install_options",
          "versionable",
          "virtual_packages",
          "install_only"
        ],
        "description": "Support via `dnf`.\n\nUsing this provider's `uninstallable` feature will not remove dependent packages. To\nremove dependent packages with this provider use the `purgeable` feature, but note this\nfeature is destructive and should be used with the utmost care.\n\nThis provider supports the `install_options` attribute, which allows command-line flags to be passed to dnf.\nThese options should be specified as an array where each element is either\n a string or a hash.\n\n* Required binaries: `dnf`, `rpm`\n* Default for: `[\"operatingsystem\", \"fedora\"] == `, `[\"osfamily\", \"redhat\"] == `\n* Supported features: `install_options`, `versionable`, `virtual_packages`, `install_only`"
      },
      "dnfmodule": {
        "features": [
          "installable",
          "uninstallable",
          "versionable",
          "supports_flavors",
          "disableable"
        ],
        "description": "\n\n* Required binaries: `/usr/bin/dnf`\n* Supported features: `installable`, `uninstallable`, `versionable`, `supports_flavors`, `disableable`"
      },
      "dpkg": {
        "features": [
          "holdable",
          "virtual_packages"
        ],
        "description": "Package management via `dpkg`.  Because this only uses `dpkg`\nand not `apt`, you must specify the source of any packages you want\nto manage.\n\n* Required binaries: `/usr/bin/dpkg`, `/usr/bin/dpkg-deb`, `/usr/bin/dpkg-query`\n* Supported features: `holdable`, `virtual_packages`"
      },
      "fink": {
        "features": [
          "versionable"
        ],
        "description": "Package management via `fink`.\n\n* Required binaries: `/sw/bin/fink`, `/sw/bin/apt-get`, `/sw/bin/apt-cache`, `/sw/bin/dpkg-query`\n* Supported features: `versionable`"
      },
      "freebsd": {
        "features": [

        ],
        "description": "The specific form of package management on FreeBSD.  This is an\nextremely quirky packaging system, in that it freely mixes between\nports and packages.  Apparently all of the tools are written in Ruby,\nso there are plans to rewrite this support to directly use those\nlibraries.\n\n* Required binaries: `/usr/sbin/pkg_info`, `/usr/sbin/pkg_add`, `/usr/sbin/pkg_delete`\n* Confined to: `operatingsystem == freebsd`"
      },
      "gem": {
        "features": [
          "versionable",
          "install_options",
          "uninstall_options",
          "targetable",
          "version_ranges"
        ],
        "description": "Ruby Gem support. If a URL is passed via `source`, then that URL is\nappended to the list of remote gem repositories; to ensure that only the\nspecified source is used, also pass `--clear-sources` via `install_options`.\nIf source is present but is not a valid URL, it will be interpreted as the\npath to a local gem file. If source is not present, the gem will be\ninstalled from the default gem repositories. Note that to modify this for Windows, it has to be a valid URL.\n\nThis provider supports the `install_options` and `uninstall_options` attributes,\nwhich allow command-line flags to be passed to the gem command.\nThese options should be specified as an array where each element is either a\nstring or a hash.\n* Supported features: `versionable`, `install_options`, `uninstall_options`, `targetable`, `version_ranges`"
      },
      "hpux": {
        "features": [

        ],
        "description": "HP-UX's packaging system.\n\n* Required binaries: `/usr/sbin/swinstall`, `/usr/sbin/swlist`, `/usr/sbin/swremove`\n* Confined to: `operatingsystem == hp-ux`\n* Default for: `[\"operatingsystem\", \"hp-ux\"] == `"
      },
      "macports": {
        "features": [
          "installable",
          "uninstallable",
          "upgradeable",
          "versionable"
        ],
        "description": "Package management using MacPorts on OS X.\n\nSupports MacPorts versions and revisions, but not variants.\nVariant preferences may be specified using\n[the MacPorts variants.conf file](http://guide.macports.org/chunked/internals.configuration-files.html#internals.configuration-files.variants-conf).\n\nWhen specifying a version in the Puppet DSL, only specify the version, not the revision.\nRevisions are only used internally for ensuring the latest version/revision of a port.\n\n* Confined to: `operatingsystem == darwin`\n* Supported features: `installable`, `uninstallable`, `upgradeable`, `versionable`"
      },
      "nim": {
        "features": [
          "versionable"
        ],
        "description": "Installation from an AIX NIM LPP source.  The `source` parameter is required\nfor this provider, and should specify the name of a NIM `lpp_source` resource\nthat is visible to the puppet agent machine.  This provider supports the\nmanagement of both BFF/installp and RPM packages.\n\nNote that package downgrades are *not* supported; if your resource specifies\na specific version number and there is already a newer version of the package\ninstalled on the machine, the resource will fail with an error message.\n\n* Required binaries: `/usr/sbin/nimclient`, `/usr/bin/lslpp`, `rpm`\n* Confined to: `exists == /etc/niminfo`\n* Supported features: `versionable`"
      },
      "openbsd": {
        "features": [
          "versionable",
          "install_options",
          "uninstall_options",
          "upgradeable",
          "supports_flavors"
        ],
        "description": "OpenBSD's form of `pkg_add` support.\n\nThis provider supports the `install_options` and `uninstall_options`\nattributes, which allow command-line flags to be passed to pkg_add and pkg_delete.\nThese options should be specified as an array where each element is either a\n string or a hash.\n\n* Required binaries: `pkg_info`, `pkg_add`, `pkg_delete`\n* Confined to: `operatingsystem == openbsd`\n* Default for: `[\"operatingsystem\", \"openbsd\"] == `\n* Supported features: `versionable`, `install_options`, `uninstall_options`, `upgradeable`, `supports_flavors`"
      },
      "opkg": {
        "features": [

        ],
        "description": "Opkg packaging support. Common on OpenWrt and OpenEmbedded platforms\n\n* Required binaries: `opkg`\n* Confined to: `operatingsystem == openwrt`\n* Default for: `[\"operatingsystem\", \"openwrt\"] == `"
      },
      "pacman": {
        "features": [
          "install_options",
          "uninstall_options",
          "upgradeable",
          "virtual_packages"
        ],
        "description": "Support for the Package Manager Utility (pacman) used in Archlinux.\n\nThis provider supports the `install_options` attribute, which allows command-line flags to be passed to pacman.\nThese options should be specified as an array where each element is either a string or a hash.\n\n* Required binaries: `/usr/bin/pacman`\n* Confined to: `operatingsystem == [:archlinux, :manjarolinux]`\n* Default for: `[\"operatingsystem\", \"[:archlinux, :manjarolinux]\"] == `\n* Supported features: `install_options`, `uninstall_options`, `upgradeable`, `virtual_packages`"
      },
      "pip": {
        "features": [
          "installable",
          "uninstallable",
          "upgradeable",
          "versionable",
          "version_ranges",
          "install_options",
          "targetable"
        ],
        "description": "Python packages via `pip`.\n\nThis provider supports the `install_options` attribute, which allows command-line flags to be passed to pip.\nThese options should be specified as an array where each element is either a string or a hash.\n* Supported features: `installable`, `uninstallable`, `upgradeable`, `versionable`, `version_ranges`, `install_options`, `targetable`"
      },
      "pip2": {
        "features": [
          "installable",
          "uninstallable",
          "upgradeable",
          "versionable",
          "install_options",
          "targetable"
        ],
        "description": "Python packages via `pip2`.\n\nThis provider supports the `install_options` attribute, which allows command-line flags to be passed to pip2.\nThese options should be specified as an array where each element is either a string or a hash.\n* Supported features: `installable`, `uninstallable`, `upgradeable`, `versionable`, `install_options`, `targetable`"
      },
      "pip3": {
        "features": [
          "installable",
          "uninstallable",
          "upgradeable",
          "versionable",
          "install_options",
          "targetable"
        ],
        "description": "Python packages via `pip3`.\n\nThis provider supports the `install_options` attribute, which allows command-line flags to be passed to pip3.\nThese options should be specified as an array where each element is either a string or a hash.\n* Supported features: `installable`, `uninstallable`, `upgradeable`, `versionable`, `install_options`, `targetable`"
      },
      "pkg": {
        "features": [
          "versionable",
          "upgradable",
          "holdable",
          "install_options"
        ],
        "description": "OpenSolaris image packaging system. See pkg(5) for more information.\n\nThis provider supports the `install_options` attribute, which allows\ncommand-line flags to be passed to pkg. These options should be specified as an\narray where each element is either a string or a hash.\n\n* Required binaries: `/usr/bin/pkg`\n* Confined to: `osfamily == solaris`\n* Default for: `[\"osfamily\", \"solaris\"] == [\"kernelrelease\", \"['5.11', '5.12']\"]`\n* Supported features: `versionable`, `upgradable`, `holdable`, `install_options`"
      },
      "pkgdmg": {
        "features": [

        ],
        "description": "Package management based on Apple's Installer.app and DiskUtility.app.\n\nThis provider works by checking the contents of a DMG image for Apple pkg or\nmpkg files. Any number of pkg or mpkg files may exist in the root directory\nof the DMG file system, and Puppet will install all of them. Subdirectories\nare not checked for packages.\n\nThis provider can also accept plain .pkg (but not .mpkg) files in addition\nto .dmg files.\n\nNotes:\n\n* The `source` attribute is mandatory. It must be either a local disk path\n  or an HTTP, HTTPS, or FTP URL to the package.\n* The `name` of the resource must be the filename (without path) of the DMG file.\n* When installing the packages from a DMG, this provider writes a file to\n  disk at `/var/db/.puppet_pkgdmg_installed_NAME`. If that file is present,\n  Puppet assumes all packages from that DMG are already installed.\n* This provider is not versionable and uses DMG filenames to determine\n  whether a package has been installed. Thus, to install new a version of a\n  package, you must create a new DMG with a different filename.\n\n* Required binaries: `/usr/sbin/installer`, `/usr/bin/hdiutil`, `/usr/bin/curl`\n* Confined to: `operatingsystem == darwin`, `feature == cfpropertylist`\n* Default for: `[\"operatingsystem\", \"darwin\"] == `"
      },
      "pkgin": {
        "features": [
          "installable",
          "uninstallable",
          "upgradeable",
          "versionable"
        ],
        "description": "Package management using pkgin, a binary package manager for pkgsrc.\n\n* Required binaries: `pkgin`\n* Default for: `[\"operatingsystem\", \"[ :smartos, :netbsd ]\"] == `\n* Supported features: `installable`, `uninstallable`, `upgradeable`, `versionable`"
      },
      "pkgng": {
        "features": [
          "versionable",
          "upgradeable",
          "install_options"
        ],
        "description": "A PkgNG provider for FreeBSD and DragonFly.\n\n* Required binaries: `/usr/local/sbin/pkg`\n* Confined to: `operatingsystem == [:freebsd, :dragonfly]`\n* Default for: `[\"operatingsystem\", \"[:freebsd, :dragonfly]\"] == `\n* Supported features: `versionable`, `upgradeable`, `install_options`"
      },
      "pkgutil": {
        "features": [

        ],
        "description": "Package management using Peter Bonivart's ``pkgutil`` command on Solaris.\n\n* Confined to: `osfamily == solaris`"
      },
      "portage": {
        "features": [
          "install_options",
          "purgeable",
          "reinstallable",
          "uninstall_options",
          "versionable",
          "virtual_packages"
        ],
        "description": "Provides packaging support for Gentoo's portage system.\n\nThis provider supports the `install_options` and `uninstall_options` attributes, which allows command-line\nflags to be passed to emerge. These options should be specified as an array where each element is either a string or a hash.\n\n* Confined to: `osfamily == gentoo`\n* Default for: `[\"osfamily\", \"gentoo\"] == `\n* Supported features: `install_options`, `purgeable`, `reinstallable`, `uninstall_options`, `versionable`, `virtual_packages`"
      },
      "ports": {
        "features": [

        ],
        "description": "Support for FreeBSD's ports.  Note that this, too, mixes packages and ports.\n\n* Required binaries: `/usr/local/sbin/portupgrade`, `/usr/local/sbin/portversion`, `/usr/local/sbin/pkg_deinstall`, `/usr/sbin/pkg_info`"
      },
      "portupgrade": {
        "features": [

        ],
        "description": "Support for FreeBSD's ports using the portupgrade ports management software.\nUse the port's full origin as the resource name. eg (ports-mgmt/portupgrade)\nfor the portupgrade port.\n\n* Required binaries: `/usr/local/sbin/portupgrade`, `/usr/local/sbin/portinstall`, `/usr/local/sbin/portversion`, `/usr/local/sbin/pkg_deinstall`, `/usr/sbin/pkg_info`"
      },
      "puppet_gem": {
        "features": [
          "versionable",
          "install_options",
          "uninstall_options"
        ],
        "description": "Puppet Ruby Gem support. This provider is useful for managing\ngems needed by the ruby provided in the puppet-agent package.\n* Supported features: `versionable`, `install_options`, `uninstall_options`"
      },
      "puppetserver_gem": {
        "features": [
          "versionable",
          "install_options",
          "uninstall_options"
        ],
        "description": "Puppet Server Ruby Gem support. If a URL is passed via `source`, then\nthat URL is appended to the list of remote gem repositories which by default\ncontains rubygems.org; To ensure that only the specified source is used also\npass `--clear-sources` in via `install_options`; if a source is present but\nis not a valid URL, it will be interpreted as the path to a local gem file.\nIf source is not present at all, the gem will be installed from the default\ngem repositories.\n\n* Confined to: `feature == hocon`, `fips_enabled == false`\n* Supported features: `versionable`, `install_options`, `uninstall_options`"
      },
      "rpm": {
        "features": [
          "versionable",
          "install_options",
          "uninstall_options",
          "virtual_packages",
          "install_only"
        ],
        "description": "RPM packaging support; should work anywhere with a working `rpm`\nbinary.\n\nThis provider supports the `install_options` and `uninstall_options`\nattributes, which allow command-line flags to be passed to rpm.\nThese options should be specified as an array where each element is either a string or a hash.\n\n* Required binaries: `rpm`\n* Supported features: `versionable`, `install_options`, `uninstall_options`, `virtual_packages`, `install_only`"
      },
      "rug": {
        "features": [
          "versionable"
        ],
        "description": "Support for suse `rug` package manager.\n\n* Required binaries: `/usr/bin/rug`, `rpm`\n* Confined to: `operatingsystem == [:suse, :sles]`\n* Supported features: `versionable`"
      },
      "sun": {
        "features": [
          "install_options"
        ],
        "description": "Sun's packaging system.  Requires that you specify the source for\nthe packages you're managing.\n\nThis provider supports the `install_options` attribute, which allows command-line flags to be passed to pkgadd.\nThese options should be specified as an array where each element is either a string\n or a hash.\n\n* Required binaries: `/usr/bin/pkginfo`, `/usr/sbin/pkgadd`, `/usr/sbin/pkgrm`\n* Confined to: `osfamily == solaris`\n* Default for: `[\"osfamily\", \"solaris\"] == `\n* Supported features: `install_options`"
      },
      "sunfreeware": {
        "features": [

        ],
        "description": "Package management using sunfreeware.com's `pkg-get` command on Solaris.\nAt this point, support is exactly the same as `blastwave` support and\nhas not actually been tested.\n\n* Required binaries: `pkg-get`\n* Confined to: `osfamily == solaris`"
      },
      "tdnf": {
        "features": [
          "install_options",
          "versionable",
          "virtual_packages"
        ],
        "description": "Support via `tdnf`.\n\nThis provider supports the `install_options` attribute, which allows command-line flags to be passed to tdnf.\nThese options should be spcified as a string (e.g. '--flag'), a hash (e.g. {'--flag' => 'value'}), or an\narray where each element is either a string or a hash.\n\n* Required binaries: `tdnf`, `rpm`\n* Default for: `[\"operatingsystem\", \"PhotonOS\"] == `\n* Supported features: `install_options`, `versionable`, `virtual_packages`"
      },
      "up2date": {
        "features": [

        ],
        "description": "Support for Red Hat's proprietary `up2date` package update\nmechanism.\n\n* Required binaries: `/usr/sbin/up2date-nox`\n* Confined to: `osfamily == redhat`\n* Default for: `[\"osfamily\", \"redhat\"] == [\"lsbdistrelease\", \"[\\\"2.1\\\", \\\"3\\\", \\\"4\\\"]\"]`"
      },
      "urpmi": {
        "features": [
          "versionable"
        ],
        "description": "Support via `urpmi`.\n\n* Required binaries: `urpmi`, `urpmq`, `rpm`, `urpme`\n* Default for: `[\"operatingsystem\", \"[:mandriva, :mandrake]\"] == `\n* Supported features: `versionable`"
      },
      "windows": {
        "features": [
          "installable",
          "uninstallable",
          "install_options",
          "uninstall_options",
          "versionable"
        ],
        "description": "Windows package management.\n\nThis provider supports either MSI or self-extracting executable installers.\n\nThis provider requires a `source` attribute when installing the package.\nIt accepts paths to local files, mapped drives, or UNC paths.\n\nThis provider supports the `install_options` and `uninstall_options`\nattributes, which allow command-line flags to be passed to the installer.\nThese options should be specified as an array where each element is either\na string or a hash.\n\nIf the executable requires special arguments to perform a silent install or\nuninstall, then the appropriate arguments should be specified using the\n`install_options` or `uninstall_options` attributes, respectively.  Puppet\nwill automatically quote any option that contains spaces.\n\n* Confined to: `operatingsystem == windows`\n* Default for: `[\"operatingsystem\", \"windows\"] == `\n* Supported features: `installable`, `uninstallable`, `install_options`, `uninstall_options`, `versionable`"
      },
      "yum": {
        "features": [
          "install_options",
          "versionable",
          "virtual_packages",
          "install_only"
        ],
        "description": "Support via `yum`.\n\nUsing this provider's `uninstallable` feature will not remove dependent packages. To\nremove dependent packages with this provider use the `purgeable` feature, but note this\nfeature is destructive and should be used with the utmost care.\n\nThis provider supports the `install_options` attribute, which allows command-line flags to be passed to yum.\nThese options should be specified as an array where each element is either a string or a hash.\n\n* Required binaries: `yum`, `rpm`\n* Default for: `[\"operatingsystem\", \"amazon\"] == `, `[\"osfamily\", \"redhat\"] == [\"operatingsystemmajrelease\", \"(4..7).to_a\"]`\n* Supported features: `install_options`, `versionable`, `virtual_packages`, `install_only`"
      },
      "zypper": {
        "features": [
          "versionable",
          "install_options",
          "virtual_packages"
        ],
        "description": "Support for SuSE `zypper` package manager. Found in SLES10sp2+ and SLES11.\n\nThis provider supports the `install_options` attribute, which allows command-line flags to be passed to zypper.\nThese options should be specified as an array where each element is either a\nstring or a hash.\n\n* Required binaries: `/usr/bin/zypper`\n* Confined to: `operatingsystem == [:suse, :sles, :sled, :opensuse]`\n* Default for: `[\"operatingsystem\", \"[:suse, :sles, :sled, :opensuse]\"] == `\n* Supported features: `versionable`, `install_options`, `virtual_packages`"
      }
    },
    "attributes": {
      "adminfile": {
        "description": "A file containing package defaults for installing packages.\n\nThis attribute is only used on Solaris. Its value should be a path to a\nlocal file stored on the target system. Solaris's package tools expect\neither an absolute file path or a relative path to a file in\n`/var/sadm/install/admin`.\n\nThe value of `adminfile` will be passed directly to the `pkgadd` or\n`pkgrm` command with the `-a <ADMINFILE>` option.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "allow_virtual": {
        "description": "Specifies if virtual package names are allowed for install and uninstall.\n\nAllowed values:\n\n* `true`\n* `false`\n* `yes`\n* `no`",
        "kind": "parameter",
        "namevar": false,
        "required_features": "virtual_packages"
      },
      "allowcdrom": {
        "description": "Tells apt to allow cdrom sources in the sources.list file.\nNormally apt will bail if you try this.\n\nAllowed values:\n\n* `true`\n* `false`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "category": {
        "description": "A read-only parameter set by the package.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "command": {
        "description": "The targeted command to use when managing a package:\n\n  package { 'mysql':\n    provider => gem,\n  }\n\n  package { 'mysql-opt':\n    name     => 'mysql',\n    provider => gem,\n    command  => '/opt/ruby/bin/gem',\n  }\n\nEach provider defines a package management command; and uses the first\ninstance of the command found in the PATH.\n\nProviders supporting the targetable feature allow you to specify the\nabsolute path of the package management command; useful when multiple\ninstances of the command are installed, or the command is not in the PATH.\n\nDefault: `default`",
        "kind": "parameter",
        "namevar": true,
        "required_features": "targetable"
      },
      "configfiles": {
        "description": "Whether to keep or replace modified config files when installing or\nupgrading a package. This only affects the `apt` and `dpkg` providers.\n\nDefault: `keep`\n\nAllowed values:\n\n* `keep`\n* `replace`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "description": {
        "description": "A read-only parameter set by the package.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "enable_only": {
        "description": "Tells `dnf module` to only enable a specific module, instead\nof installing its default profile.\n\nModules with no default profile will be enabled automatically\nwithout the use of this parameter.\n\nConflicts with the `flavor` property, which selects a profile\nto install.\n\nDefault: `false`\n\nAllowed values:\n\n* `true`\n* `false`\n* `yes`\n* `no`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "install_only": {
        "description": "It should be set for packages that should only ever be installed,\nnever updated. Kernels in particular fall into this category.\n\nDefault: `false`\n\nAllowed values:\n\n* `true`\n* `false`\n* `yes`\n* `no`",
        "kind": "parameter",
        "namevar": false,
        "required_features": "install_only"
      },
      "install_options": {
        "description": "An array of additional options to pass when installing a package. These\noptions are package-specific, and should be documented by the software\nvendor.  One commonly implemented option is `INSTALLDIR`:\n\n    package { 'mysql':\n      ensure          => installed,\n      source          => 'N:/packages/mysql-5.5.16-winx64.msi',\n      install_options => [ '/S', { 'INSTALLDIR' => 'C:\\\\mysql-5.5' } ],\n    }\n\nEach option in the array can either be a string or a hash, where each\nkey and value pair are interpreted in a provider specific way.  Each\noption will automatically be quoted when passed to the install command.\n\nWith Windows packages, note that file paths in an install option must\nuse backslashes. (Since install options are passed directly to the\ninstallation command, forward slashes won't be automatically converted\nlike they are in `file` resources.) Note also that backslashes in\ndouble-quoted strings _must_ be escaped and backslashes in single-quoted\nstrings _can_ be escaped.",
        "kind": "parameter",
        "namevar": false,
        "required_features": "install_options"
      },
      "instance": {
        "description": "A read-only parameter set by the package.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "name": {
        "description": "The package name.  This is the name that the packaging\nsystem uses internally, which is sometimes (especially on Solaris)\na name that is basically useless to humans.  If a package goes by\nseveral names, you can use a single title and then set the name\nconditionally:\n\n    # In the 'openssl' class\n    $ssl = $operatingsystem ? {\n      solaris => SMCossl,\n      default => openssl\n    }\n\n    package { 'openssl':\n      ensure => installed,\n      name   => $ssl,\n    }\n\n    ...\n\n    $ssh = $operatingsystem ? {\n      solaris => SMCossh,\n      default => openssh\n    }\n\n    package { 'openssh':\n      ensure  => installed,\n      name    => $ssh,\n      require => Package['openssl'],\n    }",
        "kind": "parameter",
        "namevar": true,
        "required_features": null
      },
      "platform": {
        "description": "A read-only parameter set by the package.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "provider": {
        "description": "The specific backend to use for this `package` resource. You will seldom need to specify this --- Puppet will usually discover the appropriate provider for your platform.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "reinstall_on_refresh": {
        "description": "Whether this resource should respond to refresh events (via `subscribe`,\n`notify`, or the `~>` arrow) by reinstalling the package. Only works for\nproviders that support the `reinstallable` feature.\n\nThis is useful for source-based distributions, where you may want to\nrecompile a package if the build options change.\n\nIf you use this, be careful of notifying classes when you want to restart\nservices. If the class also contains a refreshable package, doing so could\ncause unnecessary re-installs.\n\nDefault: `false`\n\nAllowed values:\n\n* `true`\n* `false`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "responsefile": {
        "description": "A file containing any necessary answers to questions asked by\nthe package.  This is currently used on Solaris and Debian.  The\nvalue will be validated according to system rules, but it should\ngenerally be a fully qualified path.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "root": {
        "description": "A read-only parameter set by the package.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "source": {
        "description": "Where to find the package file. This is mostly used by providers that don't\nautomatically download packages from a central repository. (For example:\nthe `yum` provider ignores this attribute, `apt` provider uses it if present\nand the `rpm` and `dpkg` providers require it.)\n\nDifferent providers accept different values for `source`. Most providers\naccept paths to local files stored on the target system. Some providers\nmay also accept URLs or network drive paths. Puppet will not\nautomatically retrieve source files for you, and usually just passes the\nvalue of `source` to the package installation command.\n\nYou can use a `file` resource if you need to manually copy package files\nto the target system.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "status": {
        "description": "A read-only parameter set by the package.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "uninstall_options": {
        "description": "An array of additional options to pass when uninstalling a package. These\noptions are package-specific, and should be documented by the software\nvendor.  For example:\n\n    package { 'VMware Tools':\n      ensure            => absent,\n      uninstall_options => [ { 'REMOVE' => 'Sync,VSS' } ],\n    }\n\nEach option in the array can either be a string or a hash, where each\nkey and value pair are interpreted in a provider specific way.  Each\noption will automatically be quoted when passed to the uninstall\ncommand.\n\nOn Windows, this is the **only** place in Puppet where backslash\nseparators should be used.  Note that backslashes in double-quoted\nstrings _must_ be double-escaped and backslashes in single-quoted\nstrings _may_ be double-escaped.",
        "kind": "parameter",
        "namevar": false,
        "required_features": "uninstall_options"
      },
      "vendor": {
        "description": "A read-only parameter set by the package.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "ensure": {
        "description": "What state the package should be in. On packaging systems that can\nretrieve new packages on their own, you can choose which package to\nretrieve by specifying a version number or `latest` as the ensure\nvalue. On packaging systems that manage configuration files separately\nfrom \"normal\" system files, you can uninstall config files by\nspecifying `purged` as the ensure value. This defaults to `installed`.\n\nVersion numbers must match the full version to install, including\nrelease if the provider uses a release moniker. For\nexample, to install the bash package from the rpm\n`bash-4.1.2-29.el6.x86_64.rpm`, use the string `'4.1.2-29.el6'`.\n\nOn supported providers, version ranges can also be ensured. For example,\ninequalities: `<2.0.0`, or intersections: `>1.0.0 <2.0.0`.\n\nDefault: `installed`\n\nAllowed values:\n\n* `present`\n* `absent`\n* `purged`\n* `held`\n* `disabled`\n* `installed`\n* `latest`\n* `/./`",
        "kind": "property",
        "namevar": false,
        "required_features": null
      },
      "flavor": {
        "description": "OpenBSD and DNF modules support 'flavors', which are\nfurther specifications for which type of package you want.",
        "kind": "property",
        "namevar": false,
        "required_features": "supports_flavors"
      },
      "mark": {
        "description": "Set to hold to tell Debian apt/Solaris pkg to hold the package version\n\n#{mark_doc}\nDefault is \"none\". Mark can be specified with or without `ensure`,\nif `ensure` is missing will default to \"present\".\n\nMark cannot be specified together with \"purged\", \"absent\" or \"held\"\nvalues for `ensure`.\n\nAllowed values:\n\n* `hold`\n* `none`",
        "kind": "property",
        "namevar": false,
        "required_features": "holdable"
      },
      "package_settings": {
        "description": "Settings that can change the contents or configuration of a package.\n\nThe formatting and effects of package_settings are provider-specific; any\nprovider that implements them must explain how to use them in its\ndocumentation. (Our general expectation is that if a package is\ninstalled but its settings are out of sync, the provider should\nre-install that package with the desired settings.)\n\nAn example of how package_settings could be used is FreeBSD's port build\noptions --- a future version of the provider could accept a hash of options,\nand would reinstall the port if the installed version lacked the correct\nsettings.\n\n    package { 'www/apache22':\n      package_settings => { 'SUEXEC' => false }\n    }\n\nAgain, check the documentation of your platform's package provider to see\nthe actual usage.",
        "kind": "property",
        "namevar": false,
        "required_features": "package_settings"
      }
    }
  },
  "resources": {
    "description": "This is a metatype that can manage other resource types.  Any\nmetaparams specified here will be passed on to any generated resources,\nso you can purge unmanaged resources but set `noop` to true so the\npurging is only logged and does not actually happen.",
    "features": {
    },
    "providers": {
    },
    "attributes": {
      "name": {
        "description": "The name of the type to be managed.",
        "kind": "parameter",
        "namevar": true,
        "required_features": null
      },
      "purge": {
        "description": "Whether to purge unmanaged resources.  When set to `true`, this will\ndelete any resource that is not specified in your configuration and is not\nautorequired by any managed resources. **Note:** The `ssh_authorized_key`\nresource type can't be purged this way; instead, see the `purge_ssh_keys`\nattribute of the `user` type.\n\nDefault: `false`\n\nAllowed values:\n\n* `true`\n* `false`\n* `yes`\n* `no`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "unless_system_user": {
        "description": "This keeps system users from being purged.  By default, it\ndoes not purge users whose UIDs are less than the minimum UID for the system (typically 500 or 1000), but you can specify\na different UID as the inclusive limit.\n\nAllowed values:\n\n* `true`\n* `false`\n* `/^\\d+$/`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "unless_uid": {
        "description": "This keeps specific uids or ranges of uids from being purged when purge is true.\nAccepts integers, integer strings, and arrays of integers or integer strings.\nTo specify a range of uids, consider using the range() function from stdlib.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      }
    }
  },
  "schedule": {
    "description": "Define schedules for Puppet. Resources can be limited to a schedule by using the\n[`schedule`](https://puppet.com/docs/puppet/latest/metaparameter.html#schedule)\nmetaparameter.\n\nCurrently, **schedules can only be used to stop a resource from being\napplied;** they cannot cause a resource to be applied when it otherwise\nwouldn't be, and they cannot accurately specify a time when a resource\nshould run.\n\nEvery time Puppet applies its configuration, it will apply the\nset of resources whose schedule does not eliminate them from\nrunning right then, but there is currently no system in place to\nguarantee that a given resource runs at a given time.  If you\nspecify a very  restrictive schedule and Puppet happens to run at a\ntime within that schedule, then the resources will get applied;\notherwise, that work may never get done.\n\nThus, it is advisable to use wider scheduling (for example, over a couple\nof hours) combined with periods and repetitions.  For instance, if you\nwanted to restrict certain resources to only running once, between\nthe hours of two and 4 AM, then you would use this schedule:\n\n    schedule { 'maint':\n      range  => '2 - 4',\n      period => daily,\n      repeat => 1,\n    }\n\nWith this schedule, the first time that Puppet runs between 2 and 4 AM,\nall resources with this schedule will get applied, but they won't\nget applied again between 2 and 4 because they will have already\nrun once that day, and they won't get applied outside that schedule\nbecause they will be outside the scheduled range.\n\nPuppet automatically creates a schedule for each of the valid periods\nwith the same name as that period (such as hourly and daily).\nAdditionally, a schedule named `puppet` is created and used as the\ndefault, with the following attributes:\n\n    schedule { 'puppet':\n      period => hourly,\n      repeat => 2,\n    }\n\nThis will cause resources to be applied every 30 minutes by default.\n\nThe `statettl` setting on the agent affects the ability of a schedule to\ndetermine if a resource has already been checked. If the `statettl` is\nset lower than the span of the associated schedule resource, then a\nresource could be checked & applied multiple times in the schedule as\nthe information about when the resource was last checked will have\nexpired from the cache.",
    "features": {
    },
    "providers": {
    },
    "attributes": {
      "name": {
        "description": "The name of the schedule.  This name is used when assigning the schedule\nto a resource with the `schedule` metaparameter:\n\n    schedule { 'everyday':\n      period => daily,\n      range  => '2 - 4',\n    }\n\n    exec { '/usr/bin/apt-get update':\n      schedule => 'everyday',\n    }",
        "kind": "parameter",
        "namevar": true,
        "required_features": null
      },
      "period": {
        "description": "The period of repetition for resources on this schedule. The default is\nfor resources to get applied every time Puppet runs.\n\nNote that the period defines how often a given resource will get\napplied but not when; if you would like to restrict the hours\nthat a given resource can be applied (for instance, only at night\nduring a maintenance window), then use the `range` attribute.\n\nIf the provided periods are not sufficient, you can provide a\nvalue to the *repeat* attribute, which will cause Puppet to\nschedule the affected resources evenly in the period the\nspecified number of times.  Take this schedule:\n\n    schedule { 'veryoften':\n      period => hourly,\n      repeat => 6,\n    }\n\nThis can cause Puppet to apply that resource up to every 10 minutes.\n\nAt the moment, Puppet cannot guarantee that level of repetition; that\nis, the resource can applied _up to_ every 10 minutes, but internal\nfactors might prevent it from actually running that often (for instance,\nif a Puppet run is still in progress when the next run is scheduled to\nstart, that next run will be suppressed).\n\nSee the `periodmatch` attribute for tuning whether to match\ntimes by their distance apart or by their specific value.\n\n> **Tip**: You can use `period => never,` to prevent a resource from being applied\nin the given `range`. This is useful if you need to create a blackout window to\nperform sensitive operations without interruption.\n\nAllowed values:\n\n* `hourly`\n* `daily`\n* `weekly`\n* `monthly`\n* `never`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "periodmatch": {
        "description": "Whether periods should be matched by a numeric value (for instance,\nwhether two times are in the same hour) or by their chronological\ndistance apart (whether two times are 60 minutes apart).\n\nDefault: `distance`\n\nAllowed values:\n\n* `number`\n* `distance`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "range": {
        "description": "The earliest and latest that a resource can be applied.  This is\nalways a hyphen-separated range within a 24 hour period, and hours\nmust be specified in numbers between 0 and 23, inclusive.  Minutes and\nseconds can optionally be provided, using the normal colon as a\nseparator. For instance:\n\n    schedule { 'maintenance':\n      range => '1:30 - 4:30',\n    }\n\nThis is mostly useful for restricting certain resources to being\napplied in maintenance windows or during off-peak hours. Multiple\nranges can be applied in array context. As a convenience when specifying\nranges, you can cross midnight (for example, `range => \"22:00 - 04:00\"`).",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "repeat": {
        "description": "How often a given resource may be applied in this schedule's `period`.\nMust be an integer.\n\nDefault: `1`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "weekday": {
        "description": "The days of the week in which the schedule should be valid.\nYou may specify the full day name 'Tuesday', the three character\nabbreviation 'Tue', or a number (as a string or as an integer) corresponding to the day of the\nweek where 0 is Sunday, 1 is Monday, and so on. Multiple days can be specified\nas an array. If not specified, the day of the week will not be\nconsidered in the schedule.\n\nIf you are also using a range match that spans across midnight\nthen this parameter will match the day that it was at the start\nof the range, not necessarily the day that it is when it matches.\nFor example, consider this schedule:\n\n    schedule { 'maintenance_window':\n      range   => '22:00 - 04:00',\n      weekday => 'Saturday',\n    }\n\nThis will match at 11 PM on Saturday and 2 AM on Sunday, but not\nat 2 AM on Saturday.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      }
    }
  },
  "service": {
    "description": "Manage running services.  Service support unfortunately varies\nwidely by platform --- some platforms have very little if any concept of a\nrunning service, and some have a very codified and powerful concept.\nPuppet's service support is usually capable of doing the right thing, but\nthe more information you can provide, the better behaviour you will get.\n\nPuppet 2.7 and newer expect init scripts to have a working status command.\nIf this isn't the case for any of your services' init scripts, you will\nneed to set `hasstatus` to false and possibly specify a custom status\ncommand in the `status` attribute. As a last resort, Puppet will attempt to\nsearch the process table by calling whatever command is listed in the `ps`\nfact. The default search pattern is the name of the service, but you can\nspecify it with the `pattern` attribute.\n\n**Refresh:** `service` resources can respond to refresh events (via\n`notify`, `subscribe`, or the `~>` arrow). If a `service` receives an\nevent from another resource, Puppet will restart the service it manages.\nThe actual command used to restart the service depends on the platform and\ncan be configured:\n\n* If you set `hasrestart` to true, Puppet will use the init script's restart command.\n* You can provide an explicit command for restarting with the `restart` attribute.\n* If you do neither, the service's stop and start commands will be used.",
    "features": {
      "configurable_timeout": "The provider can specify a minumum timeout for syncing service properties",
      "controllable": "The provider uses a control variable.",
      "enableable": "The provider can enable and disable the service.",
      "flaggable": "The provider can pass flags to the service.",
      "manages_logon_credentials": "The provider can specify the logon credentials used for a service",
      "maskable": "The provider can 'mask' the service.",
      "refreshable": "The provider can restart the service."
    },
    "providers": {
      "base": {
        "features": [

        ],
        "description": "The simplest form of Unix service support.\n\nYou have to specify enough about your service for this to work; the\nminimum you can specify is a binary for starting the process, and this\nsame binary will be searched for in the process table to stop the\nservice.  As with `init`-style services, it is preferable to specify start,\nstop, and status commands.\n\n* Required binaries: `kill`"
      },
      "bsd": {
        "features": [

        ],
        "description": "Generic BSD form of `init`-style service management with `rc.d`.\n\nUses `rc.conf.d` for service enabling and disabling.\n\n* Confined to: `operatingsystem == [:freebsd, :dragonfly]`"
      },
      "daemontools": {
        "features": [

        ],
        "description": "Daemontools service management.\n\nThis provider manages daemons supervised by D.J. Bernstein daemontools.\nWhen detecting the service directory it will check, in order of preference:\n\n* `/service`\n* `/etc/service`\n* `/var/lib/svscan`\n\nThe daemon directory should be in one of the following locations:\n\n* `/var/lib/service`\n* `/etc`\n\n...or this can be overridden in the resource's attributes:\n\n    service { 'myservice':\n      provider => 'daemontools',\n      path     => '/path/to/daemons',\n    }\n\nThis provider supports out of the box:\n\n* start/stop (mapped to enable/disable)\n* enable/disable\n* restart\n* status\n\nIf a service has `ensure => \"running\"`, it will link /path/to/daemon to\n/path/to/service, which will automatically enable the service.\n\nIf a service has `ensure => \"stopped\"`, it will only shut down the service, not\nremove the `/path/to/service` link.\n\n* Required binaries: `/usr/bin/svc`, `/usr/bin/svstat`"
      },
      "debian": {
        "features": [

        ],
        "description": "Debian's form of `init`-style management.\n\nThe only differences from `init` are support for enabling and disabling\nservices via `update-rc.d` and the ability to determine enabled status via\n`invoke-rc.d`.\n\n* Required binaries: `/usr/sbin/update-rc.d`, `/usr/sbin/invoke-rc.d`, `/usr/sbin/service`\n* Confined to: `false == Puppet::FileSystem.exist?('/proc/1/comm') && Puppet::FileSystem.read('/proc/1/comm').include?('systemd')`\n* Default for: `[\"operatingsystem\", \"cumuluslinux\"] == [\"operatingsystemmajrelease\", \"['1','2']\"]`, `[\"operatingsystem\", \"debian\"] == [\"operatingsystemmajrelease\", \"['5','6','7']\"]`, `[\"operatingsystem\", \"devuan\"] == `"
      },
      "freebsd": {
        "features": [

        ],
        "description": "Provider for FreeBSD and DragonFly BSD. Uses the `rcvar` argument of init scripts and parses/edits rc files.\n\n* Confined to: `operatingsystem == [:freebsd, :dragonfly]`\n* Default for: `[\"operatingsystem\", \"[:freebsd, :dragonfly]\"] == `"
      },
      "gentoo": {
        "features": [

        ],
        "description": "Gentoo's form of `init`-style service management.\n\nUses `rc-update` for service enabling and disabling.\n\n* Required binaries: `/sbin/rc-update`\n* Confined to: `operatingsystem == gentoo`"
      },
      "init": {
        "features": [

        ],
        "description": "Standard `init`-style service management.\n\n* Confined to: `true == begin\n      os = Facter.value(:operatingsystem).downcase\n      family = Facter.value(:osfamily).downcase\n      !(os == 'debian' || os == 'ubuntu' || family == 'redhat')\n  end`"
      },
      "launchd": {
        "features": [
          "enableable",
          "refreshable"
        ],
        "description": "This provider manages jobs with `launchd`, which is the default service\nframework for Mac OS X (and may be available for use on other platforms).\n\nFor more information, see the `launchd` man page:\n\n* <https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man8/launchd.8.html>\n\nThis provider reads plists out of the following directories:\n\n* `/System/Library/LaunchDaemons`\n* `/System/Library/LaunchAgents`\n* `/Library/LaunchDaemons`\n* `/Library/LaunchAgents`\n\n...and builds up a list of services based upon each plist's \"Label\" entry.\n\nThis provider supports:\n\n* ensure => running/stopped,\n* enable => true/false\n* status\n* restart\n\nHere is how the Puppet states correspond to `launchd` states:\n\n* stopped --- job unloaded\n* started --- job loaded\n* enabled --- 'Disable' removed from job plist file\n* disabled --- 'Disable' added to job plist file\n\nNote that this allows you to do something `launchctl` can't do, which is to\nbe in a state of \"stopped/enabled\" or \"running/disabled\".\n\nNote that this provider does not support overriding 'restart'\n\n* Required binaries: `/bin/launchctl`\n* Confined to: `operatingsystem == darwin`, `feature == cfpropertylist`\n* Default for: `[\"operatingsystem\", \"darwin\"] == `\n* Supported features: `enableable`, `refreshable`"
      },
      "openbsd": {
        "features": [
          "flaggable"
        ],
        "description": "Provider for OpenBSD's rc.d daemon control scripts\n\n* Required binaries: `/usr/sbin/rcctl`\n* Confined to: `operatingsystem == openbsd`\n* Default for: `[\"operatingsystem\", \"openbsd\"] == `\n* Supported features: `flaggable`"
      },
      "openrc": {
        "features": [

        ],
        "description": "Support for Gentoo's OpenRC initskripts\n\nUses rc-update, rc-status and rc-service to manage services.\n\n* Required binaries: `/sbin/rc-service`, `/sbin/rc-update`\n* Default for: `[\"operatingsystem\", \"gentoo\"] == `, `[\"operatingsystem\", \"funtoo\"] == `"
      },
      "openwrt": {
        "features": [
          "enableable"
        ],
        "description": "Support for OpenWrt flavored init scripts.\n\nUses /etc/init.d/service_name enable, disable, and enabled.\n\n* Confined to: `operatingsystem == openwrt`\n* Default for: `[\"operatingsystem\", \"openwrt\"] == `\n* Supported features: `enableable`"
      },
      "rcng": {
        "features": [

        ],
        "description": "RCng service management with rc.d\n\n* Confined to: `operatingsystem == [:netbsd, :cargos]`\n* Default for: `[\"operatingsystem\", \"[:netbsd, :cargos]\"] == `"
      },
      "redhat": {
        "features": [

        ],
        "description": "Red Hat's (and probably many others') form of `init`-style service\nmanagement. Uses `chkconfig` for service enabling and disabling.\n\n* Required binaries: `/sbin/chkconfig`, `/sbin/service`\n* Default for: `[\"osfamily\", \"redhat\"] == `, `[\"osfamily\", \"suse\"] == [\"operatingsystemmajrelease\", \"[\\\"10\\\", \\\"11\\\"]\"]`"
      },
      "runit": {
        "features": [

        ],
        "description": "Runit service management.\n\nThis provider manages daemons running supervised by Runit.\nWhen detecting the service directory it will check, in order of preference:\n\n* `/service`\n* `/etc/service`\n* `/var/service`\n\nThe daemon directory should be in one of the following locations:\n\n* `/etc/sv`\n* `/var/lib/service`\n\nor this can be overridden in the service resource parameters:\n\n    service { 'myservice':\n      provider => 'runit',\n      path     => '/path/to/daemons',\n    }\n\nThis provider supports out of the box:\n\n* start/stop\n* enable/disable\n* restart\n* status\n\n* Required binaries: `/usr/bin/sv`"
      },
      "service": {
        "features": [

        ],
        "description": "The simplest form of service support."
      },
      "smf": {
        "features": [
          "refreshable"
        ],
        "description": "Support for Sun's new Service Management Framework.\n\nStarting a service is effectively equivalent to enabling it, so there is\nonly support for starting and stopping services, which also enables and\ndisables them, respectively.\n\nBy specifying `manifest => \"/path/to/service.xml\"`, the SMF manifest will\nbe imported if it does not exist.\n\n* Required binaries: `/usr/sbin/svcadm`, `/usr/bin/svcs`, `/usr/sbin/svccfg`\n* Confined to: `osfamily == solaris`\n* Default for: `[\"osfamily\", \"solaris\"] == `\n* Supported features: `refreshable`"
      },
      "src": {
        "features": [
          "refreshable"
        ],
        "description": "Support for AIX's System Resource controller.\n\nServices are started/stopped based on the `stopsrc` and `startsrc`\ncommands, and some services can be refreshed with `refresh` command.\n\nEnabling and disabling services is not supported, as it requires\nmodifications to `/etc/inittab`. Starting and stopping groups of subsystems\nis not yet supported.\n\n* Confined to: `operatingsystem == aix`\n* Default for: `[\"operatingsystem\", \"aix\"] == `\n* Supported features: `refreshable`"
      },
      "systemd": {
        "features": [

        ],
        "description": "Manages `systemd` services using `systemctl`.\n\nBecause `systemd` defaults to assuming the `.service` unit type, the suffix\nmay be omitted.  Other unit types (such as `.path`) may be managed by\nproviding the proper suffix.\n\n* Required binaries: `systemctl`\n* Confined to: `true == Puppet::FileSystem.exist?('/proc/1/comm') && Puppet::FileSystem.read('/proc/1/comm').include?('systemd')`\n* Default for: `[\"osfamily\", \"[:archlinux]\"] == `, `[\"osfamily\", \"redhat\"] == [\"operatingsystemmajrelease\", \"[\\\"7\\\", \\\"8\\\"]\"]`, `[\"osfamily\", \"redhat\"] == [\"operatingsystem\", \"fedora\"]`, `[\"osfamily\", \"suse\"] == `, `[\"osfamily\", \"coreos\"] == `, `[\"operatingsystem\", \"amazon\"] == [\"operatingsystemmajrelease\", \"[\\\"2\\\"]\"]`, `[\"operatingsystem\", \"debian\"] == `, `[\"operatingsystem\", \"LinuxMint\"] == `, `[\"operatingsystem\", \"ubuntu\"] == `, `[\"operatingsystem\", \"cumuluslinux\"] == [\"operatingsystemmajrelease\", \"[\\\"3\\\", \\\"4\\\"]\"]`"
      },
      "upstart": {
        "features": [
          "enableable"
        ],
        "description": "Ubuntu service management with `upstart`.\n\nThis provider manages `upstart` jobs on Ubuntu. For `upstart` documentation,\nsee <http://upstart.ubuntu.com/>.\n\n* Required binaries: `/sbin/start`, `/sbin/stop`, `/sbin/restart`, `/sbin/status`, `/sbin/initctl`\n* Confined to: `any == [\n    Facter.value(:operatingsystem) == 'Ubuntu',\n    (Facter.value(:osfamily) == 'RedHat' and Facter.value(:operatingsystemrelease) =~ /^6\\./),\n    (Facter.value(:operatingsystem) == 'Amazon' and Facter.value(:operatingsystemmajrelease) =~ /\\d{4}/),\n    Facter.value(:operatingsystem) == 'LinuxMint',\n  ]`, `true == lambda { has_initctl? }`\n* Default for: `[\"operatingsystem\", \"ubuntu\"] == [\"operatingsystemmajrelease\", \"[\\\"10.04\\\", \\\"12.04\\\", \\\"14.04\\\", \\\"14.10\\\"]\"]`, `[\"operatingsystem\", \"LinuxMint\"] == [\"operatingsystemmajrelease\", \"[\\\"10\\\", \\\"11\\\", \\\"12\\\", \\\"13\\\", \\\"14\\\", \\\"15\\\", \\\"16\\\", \\\"17\\\"]\"]`\n* Supported features: `enableable`"
      },
      "windows": {
        "features": [
          "refreshable",
          "configurable_timeout",
          "manages_logon_credentials"
        ],
        "description": "Support for Windows Service Control Manager (SCM). This provider can\nstart, stop, enable, and disable services, and the SCM provides working\nstatus methods for all services.\n\nControl of service groups (dependencies) is not yet supported, nor is running\nservices as a specific user.\n\n* Confined to: `operatingsystem == windows`\n* Default for: `[\"operatingsystem\", \"windows\"] == `\n* Supported features: `refreshable`, `configurable_timeout`, `manages_logon_credentials`"
      }
    },
    "attributes": {
      "binary": {
        "description": "The path to the daemon.  This is only used for\nsystems that do not support init scripts.  This binary will be\nused to start the service if no `start` parameter is\nprovided.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "control": {
        "description": "The control variable used to manage services (originally for HP-UX).\nDefaults to the upcased service name plus `START` replacing dots with\nunderscores, for those providers that support the `controllable` feature.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "hasrestart": {
        "description": "Specify that an init script has a `restart` command.  If this is\nfalse and you do not specify a command in the `restart` attribute,\nthe init script's `stop` and `start` commands will be used.\n\nAllowed values:\n\n* `true`\n* `false`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "hasstatus": {
        "description": "Declare whether the service's init script has a functional status\ncommand. This attribute's default value changed in Puppet 2.7.0.\n\nThe init script's status command must return 0 if the service is\nrunning and a nonzero value otherwise. Ideally, these exit codes\nshould conform to [the LSB's specification][lsb-exit-codes] for init\nscript status actions, but Puppet only considers the difference\nbetween 0 and nonzero to be relevant.\n\nIf a service's init script does not support any kind of status command,\nyou should set `hasstatus` to false and either provide a specific\ncommand using the `status` attribute or expect that Puppet will look for\nthe service name in the process table. Be aware that 'virtual' init\nscripts (like 'network' under Red Hat systems) will respond poorly to\nrefresh events from other resources if you override the default behavior\nwithout providing a status command.\n\nDefault: `true`\n\nAllowed values:\n\n* `true`\n* `false`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "logonpassword": {
        "description": "Specify a password for service logon. Default value is an empty string (when logonaccount is specified).",
        "kind": "parameter",
        "namevar": false,
        "required_features": "manages_logon_credentials"
      },
      "manifest": {
        "description": "Specify a command to config a service, or a path to a manifest to do so.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "name": {
        "description": "The name of the service to run.\n\nThis name is used to find the service; on platforms where services\nhave short system names and long display names, this should be the\nshort name. (To take an example from Windows, you would use \"wuauserv\"\nrather than \"Automatic Updates.\")",
        "kind": "parameter",
        "namevar": true,
        "required_features": null
      },
      "path": {
        "description": "The search path for finding init scripts.  Multiple values should\nbe separated by colons or provided as an array.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "pattern": {
        "description": "The pattern to search for in the process table.\nThis is used for stopping services on platforms that do not\nsupport init scripts, and is also used for determining service\nstatus on those service whose init scripts do not include a status\ncommand.\n\nDefaults to the name of the service. The pattern can be a simple string\nor any legal Ruby pattern, including regular expressions (which should\nbe quoted without enclosing slashes).",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "provider": {
        "description": "The specific backend to use for this `service` resource. You will seldom need to specify this --- Puppet will usually discover the appropriate provider for your platform.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "restart": {
        "description": "Specify a *restart* command manually.  If left\nunspecified, the service will be stopped and then started.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "start": {
        "description": "Specify a *start* command manually.  Most service subsystems\nsupport a `start` command, so this will not need to be\nspecified.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "status": {
        "description": "Specify a *status* command manually.  This command must\nreturn 0 if the service is running and a nonzero value otherwise.\nIdeally, these exit codes should conform to [the LSB's\nspecification][lsb-exit-codes] for init script status actions, but\nPuppet only considers the difference between 0 and nonzero to be\nrelevant.\n\nIf left unspecified, the status of the service will be determined\nautomatically, usually by looking for the service in the process\ntable.\n\n[lsb-exit-codes]: http://refspecs.linuxfoundation.org/LSB_4.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptact.html",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "stop": {
        "description": "Specify a *stop* command manually.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "timeout": {
        "description": "Specify an optional minimum timeout (in seconds) for puppet to wait when syncing service properties",
        "kind": "parameter",
        "namevar": false,
        "required_features": "configurable_timeout"
      },
      "enable": {
        "description": "Whether a service should be enabled to start at boot.\nThis property behaves differently depending on the platform;\nwherever possible, it relies on local tools to enable or disable\na given service. Default values depend on the platform.\n\nIf you don't specify a value for the `enable` attribute, Puppet leaves\nthat aspect of the service alone and your operating system determines\nthe behavior.\n\nAllowed values:\n\n* `true`\n* `false`\n* `manual`\n* `mask`\n* `delayed`",
        "kind": "property",
        "namevar": false,
        "required_features": "enableable"
      },
      "ensure": {
        "description": "Whether a service should be running. Default values depend on the platform.\n\nAllowed values:\n\n* `stopped`\n* `running`\n* `false`\n* `true`",
        "kind": "property",
        "namevar": false,
        "required_features": null
      },
      "flags": {
        "description": "Specify a string of flags to pass to the startup script.",
        "kind": "property",
        "namevar": false,
        "required_features": "flaggable"
      },
      "logonaccount": {
        "description": "Specify an account for service logon",
        "kind": "property",
        "namevar": false,
        "required_features": "manages_logon_credentials"
      }
    }
  },
  "stage": {
    "description": "A resource type for creating new run stages.  Once a stage is available,\nclasses can be assigned to it by declaring them with the resource-like syntax\nand using\n[the `stage` metaparameter](https://puppet.com/docs/puppet/latest/metaparameter.html#stage).\n\nNote that new stages are not useful unless you also declare their order\nin relation to the default `main` stage.\n\nA complete run stage example:\n\n    stage { 'pre':\n      before => Stage['main'],\n    }\n\n    class { 'apt-updates':\n      stage => 'pre',\n    }\n\nIndividual resources cannot be assigned to run stages; you can only set stages\nfor classes.",
    "features": {
    },
    "providers": {
    },
    "attributes": {
      "name": {
        "description": "The name of the stage. Use this as the value for the `stage` metaparameter\nwhen assigning classes to this stage.",
        "kind": "parameter",
        "namevar": true,
        "required_features": null
      }
    }
  },
  "tidy": {
    "description": "Remove unwanted files based on specific criteria.  Multiple\ncriteria are OR'd together, so a file that is too large but is not\nold enough will still get tidied.\n\nIf you don't specify either `age` or `size`, then all files will\nbe removed.\n\nThis resource type works by generating a file resource for every file\nthat should be deleted and then letting that resource perform the\nactual deletion.",
    "features": {
    },
    "providers": {
    },
    "attributes": {
      "age": {
        "description": "Tidy files whose age is equal to or greater than\nthe specified time.  You can choose seconds, minutes,\nhours, days, or weeks by specifying the first letter of any\nof those words (for example, '1w' represents one week).\n\nSpecifying 0 will remove all files.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "backup": {
        "description": "Whether tidied files should be backed up.  Any values are passed\ndirectly to the file resources used for actual file deletion, so consult\nthe `file` type's backup documentation to determine valid values.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "matches": {
        "description": "One or more (shell type) file glob patterns, which restrict\nthe list of files to be tidied to those whose basenames match\nat least one of the patterns specified. Multiple patterns can\nbe specified using an array.\n\nExample:\n\n    tidy { '/tmp':\n      age     => '1w',\n      recurse => 1,\n      matches => [ '[0-9]pub*.tmp', '*.temp', 'tmpfile?' ],\n    }\n\nThis removes files from `/tmp` if they are one week old or older,\nare not in a subdirectory and match one of the shell globs given.\n\nNote that the patterns are matched against the basename of each\nfile -- that is, your glob patterns should not have any '/'\ncharacters in them, since you are only specifying against the last\nbit of the file.\n\nFinally, note that you must now specify a non-zero/non-false value\nfor recurse if matches is used, as matches only apply to files found\nby recursion (there's no reason to use static patterns match against\na statically determined path).  Requiring explicit recursion clears\nup a common source of confusion.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "path": {
        "description": "The path to the file or directory to manage.  Must be fully\nqualified.",
        "kind": "parameter",
        "namevar": true,
        "required_features": null
      },
      "recurse": {
        "description": "If target is a directory, recursively descend\ninto the directory looking for files to tidy.\n\nAllowed values:\n\n* `true`\n* `false`\n* `inf`\n* `/^[0-9]+$/`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "rmdirs": {
        "description": "Tidy directories in addition to files; that is, remove\ndirectories whose age is older than the specified criteria.\nThis will only remove empty directories, so all contained\nfiles must also be tidied before a directory gets removed.\n\nAllowed values:\n\n* `true`\n* `false`\n* `yes`\n* `no`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "size": {
        "description": "Tidy files whose size is equal to or greater than\nthe specified size.  Unqualified values are in kilobytes, but\n*b*, *k*, *m*, *g*, and *t* can be appended to specify *bytes*,\n*kilobytes*, *megabytes*, *gigabytes*, and *terabytes*, respectively.\nOnly the first character is significant, so the full word can also\nbe used.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "type": {
        "description": "Set the mechanism for determining age.\n\nDefault: `atime`\n\nAllowed values:\n\n* `atime`\n* `mtime`\n* `ctime`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      }
    }
  },
  "user": {
    "description": "Manage users.  This type is mostly built to manage system\nusers, so it is lacking some features useful for managing normal\nusers.\n\nThis resource type uses the prescribed native tools for creating\ngroups and generally uses POSIX APIs for retrieving information\nabout them.  It does not directly modify `/etc/passwd` or anything.\n\n**Autorequires:** If Puppet is managing the user's primary group (as\nprovided in the `gid` attribute) or any group listed in the `groups`\nattribute then the user resource will autorequire that group. If Puppet\nis managing any role accounts corresponding to the user's roles, the\nuser resource will autorequire those role accounts.",
    "features": {
      "allows_duplicates": "The provider supports duplicate users with the same UID.",
      "manages_aix_lam": "The provider can manage AIX Loadable Authentication Module (LAM) system.",
      "manages_expiry": "The provider can manage the expiry date for a user.",
      "manages_homedir": "The provider can create and remove home directories.",
      "manages_local_users_and_groups": "Allows local users to be managed on systems that also use some other remote Name Service Switch (NSS) method of managing accounts.",
      "manages_loginclass": "The provider can manage the login class for a user.",
      "manages_password_age": "The provider can set age requirements and restrictions for passwords.",
      "manages_password_salt": "The provider can set a password salt. This is for providers that implement PBKDF2 passwords with salt properties.",
      "manages_passwords": "The provider can modify user passwords, by accepting a password hash.",
      "manages_roles": "The provider can manage roles",
      "manages_shell": "The provider allows for setting shell and validates if possible",
      "manages_solaris_rbac": "The provider can manage normal users",
      "system_users": "The provider allows you to create system users with lower UIDs."
    },
    "providers": {
      "aix": {
        "features": [
          "manages_aix_lam",
          "manages_homedir",
          "manages_passwords",
          "manages_shell",
          "manages_expiry",
          "manages_password_age",
          "manages_local_users_and_groups"
        ],
        "description": "User management for AIX.\n\n* Required binaries: `/usr/sbin/lsuser`, `/usr/bin/mkuser`, `/usr/sbin/rmuser`, `/usr/bin/chuser`, `/bin/chpasswd`\n* Confined to: `operatingsystem == aix`\n* Default for: `[\"operatingsystem\", \"aix\"] == `\n* Supported features: `manages_aix_lam`, `manages_homedir`, `manages_passwords`, `manages_shell`, `manages_expiry`, `manages_password_age`, `manages_local_users_and_groups`"
      },
      "directoryservice": {
        "features": [
          "manages_passwords",
          "manages_password_salt",
          "manages_shell"
        ],
        "description": "User management on OS X.\n\n* Required binaries: `/usr/bin/uuidgen`, `/usr/bin/dsimport`, `/usr/bin/dscl`, `/usr/bin/dscacheutil`\n* Confined to: `operatingsystem == darwin`, `feature == cfpropertylist`\n* Default for: `[\"operatingsystem\", \"darwin\"] == `\n* Supported features: `manages_passwords`, `manages_password_salt`, `manages_shell`"
      },
      "hpuxuseradd": {
        "features": [
          "manages_homedir",
          "allows_duplicates",
          "manages_passwords"
        ],
        "description": "User management for HP-UX. This provider uses the undocumented `-F`\nswitch to HP-UX's special `usermod` binary to work around the fact that\nits standard `usermod` cannot make changes while the user is logged in.\nNew functionality provides for changing trusted computing passwords and\nresetting password expirations under trusted computing.\n\n* Required binaries: `/usr/sam/lbin/usermod.sam`, `/usr/sam/lbin/userdel.sam`, `/usr/sam/lbin/useradd.sam`\n* Confined to: `operatingsystem == hp-ux`\n* Default for: `[\"operatingsystem\", \"hp-ux\"] == `\n* Supported features: `manages_homedir`, `allows_duplicates`, `manages_passwords`"
      },
      "ldap": {
        "features": [
          "manages_passwords",
          "manages_shell"
        ],
        "description": "User management via LDAP.\n\nThis provider requires that you have valid values for all of the\nLDAP-related settings in `puppet.conf`, including `ldapbase`.  You will\nalmost definitely need settings for `ldapuser` and `ldappassword` in order\nfor your clients to write to LDAP.\n\nNote that this provider will automatically generate a UID for you if\nyou do not specify one, but it is a potentially expensive operation,\nas it iterates across all existing users to pick the appropriate next one.\n\n* Confined to: `feature == ldap`, `false == (Puppet[:ldapuser] == \"\")`\n* Supported features: `manages_passwords`, `manages_shell`"
      },
      "openbsd": {
        "features": [
          "manages_homedir",
          "manages_expiry",
          "system_users",
          "manages_shell"
        ],
        "description": "User management via `useradd` and its ilk for OpenBSD. Note that you\nwill need to install Ruby's shadow password library (package known as\n`ruby-shadow`) if you wish to manage user passwords.\n\n* Required binaries: `useradd`, `userdel`, `usermod`, `passwd`\n* Confined to: `operatingsystem == openbsd`\n* Default for: `[\"operatingsystem\", \"openbsd\"] == `\n* Supported features: `manages_homedir`, `manages_expiry`, `system_users`, `manages_shell`"
      },
      "pw": {
        "features": [
          "manages_homedir",
          "allows_duplicates",
          "manages_passwords",
          "manages_expiry",
          "manages_shell"
        ],
        "description": "User management via `pw` on FreeBSD and DragonFly BSD.\n\n* Required binaries: `pw`\n* Confined to: `operatingsystem == [:freebsd, :dragonfly]`\n* Default for: `[\"operatingsystem\", \"[:freebsd, :dragonfly]\"] == `\n* Supported features: `manages_homedir`, `allows_duplicates`, `manages_passwords`, `manages_expiry`, `manages_shell`"
      },
      "user_role_add": {
        "features": [
          "manages_homedir",
          "allows_duplicates",
          "manages_solaris_rbac",
          "manages_roles",
          "manages_passwords",
          "manages_password_age",
          "manages_shell"
        ],
        "description": "User and role management on Solaris, via `useradd` and `roleadd`.\n\n* Required binaries: `useradd`, `userdel`, `usermod`, `passwd`, `roleadd`, `roledel`, `rolemod`\n* Default for: `[\"osfamily\", \"solaris\"] == `\n* Supported features: `manages_homedir`, `allows_duplicates`, `manages_solaris_rbac`, `manages_roles`, `manages_passwords`, `manages_password_age`, `manages_shell`"
      },
      "useradd": {
        "features": [
          "manages_homedir",
          "allows_duplicates",
          "manages_expiry",
          "manages_shell"
        ],
        "description": "User management via `useradd` and its ilk.  Note that you will need to\ninstall Ruby's shadow password library (often known as `ruby-libshadow`)\nif you wish to manage user passwords.\n\n* Required binaries: `useradd`, `userdel`, `usermod`, `chage`\n* Supported features: `manages_homedir`, `allows_duplicates`, `manages_expiry`, `manages_shell`"
      },
      "windows_adsi": {
        "features": [
          "manages_homedir",
          "manages_passwords",
          "manages_roles"
        ],
        "description": "Local user management for Windows.\n\n* Confined to: `operatingsystem == windows`\n* Default for: `[\"operatingsystem\", \"windows\"] == `\n* Supported features: `manages_homedir`, `manages_passwords`, `manages_roles`"
      }
    },
    "attributes": {
      "allowdupe": {
        "description": "Whether to allow duplicate UIDs.\n\nDefault: `false`\n\nAllowed values:\n\n* `true`\n* `false`\n* `yes`\n* `no`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "attribute_membership": {
        "description": "Whether specified attribute value pairs should be treated as the\n**complete list** (`inclusive`) or the **minimum list** (`minimum`) of\nattribute/value pairs for the user.\n\nDefault: `minimum`\n\nAllowed values:\n\n* `inclusive`\n* `minimum`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "auth_membership": {
        "description": "Whether specified auths should be considered the **complete list**\n(`inclusive`) or the **minimum list** (`minimum`) of auths the user\nhas. This setting is specific to managing Solaris authorizations.\n\nDefault: `minimum`\n\nAllowed values:\n\n* `inclusive`\n* `minimum`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "forcelocal": {
        "description": "Forces the management of local accounts when accounts are also\nbeing managed by some other Name Service Switch (NSS). For AIX, refer to the `ia_load_module` parameter.\n\nThis option relies on your operating system's implementation of `luser*` commands, such as `luseradd` , and `lgroupadd`, `lusermod`. The `forcelocal` option could behave unpredictably in some circumstances. If the tools it depends on are not available, it might have no effect at all.\n\nDefault: `false`\n\nAllowed values:\n\n* `true`\n* `false`\n* `yes`\n* `no`",
        "kind": "parameter",
        "namevar": false,
        "required_features": "manages_local_users_and_groups"
      },
      "ia_load_module": {
        "description": "The name of the I&A module to use to manage this user.\nThis should be set to `files` if managing local users.",
        "kind": "parameter",
        "namevar": false,
        "required_features": "manages_aix_lam"
      },
      "key_membership": {
        "description": "Whether specified key/value pairs should be considered the\n**complete list** (`inclusive`) or the **minimum list** (`minimum`) of\nthe user's attributes.\n\nDefault: `minimum`\n\nAllowed values:\n\n* `inclusive`\n* `minimum`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "managehome": {
        "description": "Whether to manage the home directory when Puppet creates or removes the user.\nThis creates the home directory if Puppet also creates the user account, and deletes the\nhome directory if Puppet also removes the user account.\n\nThis parameter has no effect unless Puppet is also creating or removing the user in the\nresource at the same time. For instance, Puppet creates a home directory for a managed\nuser if `ensure => present` and the user does not exist at the time of the Puppet run.\nIf the home directory is then deleted manually, Puppet will not recreate it on the next\nrun.\n\nNote that on Windows, this manages creation/deletion of the user profile instead of the\nhome directory. The user profile is stored in the `C:\\Users\\<username>` directory.\n\nDefault: `false`\n\nAllowed values:\n\n* `true`\n* `false`\n* `yes`\n* `no`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "membership": {
        "description": "If `minimum` is specified, Puppet will ensure that the user is a\nmember of all specified groups, but will not remove any other groups\nthat the user is a part of.\n\nIf `inclusive` is specified, Puppet will ensure that the user is a\nmember of **only** specified groups.\n\nDefault: `minimum`\n\nAllowed values:\n\n* `inclusive`\n* `minimum`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "name": {
        "description": "The user name. While naming limitations vary by operating system,\nit is advisable to restrict names to the lowest common denominator,\nwhich is a maximum of 8 characters beginning with a letter.\n\nNote that Puppet considers user names to be case-sensitive, regardless\nof the platform's own rules; be sure to always use the same case when\nreferring to a given user.",
        "kind": "parameter",
        "namevar": true,
        "required_features": null
      },
      "profile_membership": {
        "description": "Whether specified roles should be treated as the **complete list**\n(`inclusive`) or the **minimum list** (`minimum`) of roles\nof which the user is a member.\n\nDefault: `minimum`\n\nAllowed values:\n\n* `inclusive`\n* `minimum`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "provider": {
        "description": "The specific backend to use for this `user` resource. You will seldom need to specify this --- Puppet will usually discover the appropriate provider for your platform.",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "purge_ssh_keys": {
        "description": "Whether to purge authorized SSH keys for this user if they are not managed\nwith the `ssh_authorized_key` resource type. This parameter is a noop if the\nssh_authorized_key type is not available.\n\nAllowed values are:\n\n* `false` (default) --- don't purge SSH keys for this user.\n* `true` --- look for keys in the `.ssh/authorized_keys` file in the user's\n  home directory. Purge any keys that aren't managed as `ssh_authorized_key`\n  resources.\n* An array of file paths --- look for keys in all of the files listed. Purge\n  any keys that aren't managed as `ssh_authorized_key` resources. If any of\n  these paths starts with `~` or `%h`, that token will be replaced with\n  the user's home directory.\n\nDefault: `false`\n\nAllowed values:\n\n* `true`\n* `false`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "role_membership": {
        "description": "Whether specified roles should be considered the **complete list**\n(`inclusive`) or the **minimum list** (`minimum`) of roles the user\nhas.\n\nDefault: `minimum`\n\nAllowed values:\n\n* `inclusive`\n* `minimum`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "system": {
        "description": "Whether the user is a system user, according to the OS's criteria;\non most platforms, a UID less than or equal to 500 indicates a system\nuser. This parameter is only used when the resource is created and will\nnot affect the UID when the user is present.\n\nDefault: `false`\n\nAllowed values:\n\n* `true`\n* `false`\n* `yes`\n* `no`",
        "kind": "parameter",
        "namevar": false,
        "required_features": null
      },
      "attributes": {
        "description": "Specify AIX attributes for the user in an array or hash of attribute = value pairs.\n\n For example:\n\n ```\n ['minage=0', 'maxage=5', 'SYSTEM=compat']\n ```\n\n or\n\n```\nattributes => { 'minage' => '0', 'maxage' => '5', 'SYSTEM' => 'compat' }\n```",
        "kind": "property",
        "namevar": false,
        "required_features": "manages_aix_lam"
      },
      "auths": {
        "description": "The auths the user has.  Multiple auths should be\nspecified as an array.",
        "kind": "property",
        "namevar": false,
        "required_features": "manages_solaris_rbac"
      },
      "comment": {
        "description": "A description of the user.  Generally the user's full name.",
        "kind": "property",
        "namevar": false,
        "required_features": null
      },
      "ensure": {
        "description": "The basic state that the object should be in.\n\nAllowed values:\n\n* `present`\n* `absent`\n* `role`",
        "kind": "property",
        "namevar": false,
        "required_features": null
      },
      "expiry": {
        "description": "The expiry date for this user. Provide as either the special\nvalue `absent` to ensure that the account never expires, or as\na zero-padded YYYY-MM-DD format -- for example, 2010-02-19.\n\nAllowed values:\n\n* `absent`\n* `/^\\d{4}-\\d{2}-\\d{2}$/`",
        "kind": "property",
        "namevar": false,
        "required_features": "manages_expiry"
      },
      "gid": {
        "description": "The user's primary group.  Can be specified numerically or by name.\n\nThis attribute is not supported on Windows systems; use the `groups`\nattribute instead. (On Windows, designating a primary group is only\nmeaningful for domain accounts, which Puppet does not currently manage.)",
        "kind": "property",
        "namevar": false,
        "required_features": null
      },
      "groups": {
        "description": "The groups to which the user belongs.  The primary group should\nnot be listed, and groups should be identified by name rather than by\nGID.  Multiple groups should be specified as an array.",
        "kind": "property",
        "namevar": false,
        "required_features": null
      },
      "home": {
        "description": "The home directory of the user.  The directory must be created\nseparately and is not currently checked for existence.",
        "kind": "property",
        "namevar": false,
        "required_features": null
      },
      "iterations": {
        "description": "This is the number of iterations of a chained computation of the\n[PBKDF2 password hash](https://en.wikipedia.org/wiki/PBKDF2). This parameter\nis used in OS X, and is required for managing passwords on OS X 10.8 and\nnewer.",
        "kind": "property",
        "namevar": false,
        "required_features": "manages_password_salt"
      },
      "keys": {
        "description": "Specify user attributes in an array of key = value pairs.",
        "kind": "property",
        "namevar": false,
        "required_features": "manages_solaris_rbac"
      },
      "loginclass": {
        "description": "The name of login class to which the user belongs.",
        "kind": "property",
        "namevar": false,
        "required_features": "manages_loginclass"
      },
      "password": {
        "description": "The user's password, in whatever encrypted format the local system\nrequires. Consult your operating system's documentation for acceptable password\nencryption formats and requirements.\n\n* Mac OS X 10.5 and 10.6, and some older Linux distributions, use salted SHA1\n  hashes. You can use Puppet's built-in `sha1` function to generate a salted SHA1\n  hash from a password.\n* Mac OS X 10.7 (Lion), and many recent Linux distributions, use salted SHA512\n  hashes. The Puppet Labs [stdlib][] module contains a `str2saltedsha512` function\n  which can generate password hashes for these operating systems.\n* OS X 10.8 and higher use salted SHA512 PBKDF2 hashes. When managing passwords\n  on these systems, the `salt` and `iterations` attributes need to be specified as\n  well as the password.\n* Windows passwords can be managed only in cleartext, because there is no Windows\n  API for setting the password hash.\n\n[stdlib]: https://github.com/puppetlabs/puppetlabs-stdlib/\n\nEnclose any value that includes a dollar sign ($) in single quotes (') to avoid\naccidental variable interpolation.\n\nTo redact passwords from reports to PuppetDB, use the `Sensitive` data type. For\nexample, this resource protects the password:\n\n```puppet\nuser { 'foo':\n  ensure   => present,\n  password => Sensitive(\"my secret password\")\n}\n```\n\nThis results in the password being redacted from the report, as in the\n`previous_value`, `desired_value`, and `message` fields below.\n\n```yaml\n    events:\n    - !ruby/object:Puppet::Transaction::Event\n      audited: false\n      property: password\n      previous_value: \"[redacted]\"\n      desired_value: \"[redacted]\"\n      historical_value:\n      message: changed [redacted] to [redacted]\n      name: :password_changed\n      status: success\n      time: 2017-05-17 16:06:02.934398293 -07:00\n      redacted: true\n      corrective_change: false\n    corrective_change: false\n```",
        "kind": "property",
        "namevar": false,
        "required_features": "manages_passwords"
      },
      "password_max_age": {
        "description": "The maximum number of days a password may be used before it must be changed.",
        "kind": "property",
        "namevar": false,
        "required_features": "manages_password_age"
      },
      "password_min_age": {
        "description": "The minimum number of days a password must be used before it may be changed.",
        "kind": "property",
        "namevar": false,
        "required_features": "manages_password_age"
      },
      "password_warn_days": {
        "description": "The number of days before a password is going to expire (see the maximum password age) during which the user should be warned.",
        "kind": "property",
        "namevar": false,
        "required_features": "manages_password_age"
      },
      "profiles": {
        "description": "The profiles the user has.  Multiple profiles should be\nspecified as an array.",
        "kind": "property",
        "namevar": false,
        "required_features": "manages_solaris_rbac"
      },
      "project": {
        "description": "The name of the project associated with a user.",
        "kind": "property",
        "namevar": false,
        "required_features": "manages_solaris_rbac"
      },
      "roles": {
        "description": "The roles the user has.  Multiple roles should be\nspecified as an array.",
        "kind": "property",
        "namevar": false,
        "required_features": "manages_roles"
      },
      "salt": {
        "description": "This is the 32-byte salt used to generate the PBKDF2 password used in\nOS X. This field is required for managing passwords on OS X >= 10.8.",
        "kind": "property",
        "namevar": false,
        "required_features": "manages_password_salt"
      },
      "shell": {
        "description": "The user's login shell.  The shell must exist and be\nexecutable.\n\nThis attribute cannot be managed on Windows systems.",
        "kind": "property",
        "namevar": false,
        "required_features": "manages_shell"
      },
      "uid": {
        "description": "The user ID; must be specified numerically. If no user ID is\nspecified when creating a new user, then one will be chosen\nautomatically. This will likely result in the same user having\ndifferent UIDs on different systems, which is not recommended. This is\nespecially noteworthy when managing the same user on both Darwin and\nother platforms, since Puppet does UID generation on Darwin, but\nthe underlying tools do so on other platforms.\n\nOn Windows, this property is read-only and will return the user's\nsecurity identifier (SID).",
        "kind": "property",
        "namevar": false,
        "required_features": null
      }
    }
  },
  "whit": {
    "description": "Whits are internal artifacts of Puppet's current implementation, and\nPuppet suppresses their appearance in all logs. We make no guarantee of\nthe whit's continued existence, and it should never be used in an actual\nmanifest. Use the `anchor` type from the puppetlabs-stdlib module if you\nneed arbitrary whit-like no-op resources.",
    "features": {
    },
    "providers": {
    },
    "attributes": {
      "name": {
        "description": "The name of the whit, because it must have one.",
        "kind": "parameter",
        "namevar": true,
        "required_features": null
      }
    }
  }
}